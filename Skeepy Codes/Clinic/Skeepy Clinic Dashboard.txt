/**
 * Skeepy Clinic Dashboard - Mobile-First Shortcode with Claims Dashboard + Benefit Tracker + Auto Deduction + Enhanced CSS
 * Use shortcode: [skeepy_clinic_dashboard_mobile]
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// SkeepyBenefitTracker class - complete implementation
if (!class_exists('SkeepyBenefitTracker')) {
    class SkeepyBenefitTracker {
        private $wpdb;
        private $usage_table;
        private $pets_table;
        private $claims_table;
        
        public function __construct() {
            global $wpdb;
            $this->wpdb = $wpdb;
            $this->usage_table = $wpdb->prefix . 'skeepy_benefit_usage';
            $this->pets_table = $wpdb->prefix . 'skeepy_pets';
            $this->claims_table = $wpdb->prefix . 'skeepy_claims';
        }
        
        public function calculateUsedBenefits($hmo_id) {
            // Get all approved/paid claims for this HMO ID - check multiple status values
            $claims = $this->wpdb->get_results($this->wpdb->prepare(
                "SELECT * FROM {$this->claims_table} WHERE patient_hmo_id = %s AND status IN ('approved', 'paid', 'Approved', 'Paid', 'APPROVED', 'PAID')",
                $hmo_id
            ));
            

            
            $service_usage = array();
            $total_coverage_used = 0;
            
            foreach ($claims as $claim) {
                // Parse services from claim - FIXED to pass full claim object
                $services = $this->parseClaimServices($claim);
                $claim_amount = floatval(str_replace(['₦', ','], '', $claim->total_amount));
                

                
                foreach ($services as $service) {
                    $service_name = trim($service['name']);
                    $service_amount = floatval($service['amount']);
                    
                    if (!isset($service_usage[$service_name])) {
                        $service_usage[$service_name] = array(
                            'count_used' => 0,
                            'amount_used' => 0
                        );
                    }
                    
                    $service_usage[$service_name]['count_used']++;
                    $service_usage[$service_name]['amount_used'] += $service_amount;
                }
                
                $total_coverage_used += $claim_amount;
            }
            

            
            // Get plan limits
            $pet = $this->wpdb->get_row($this->wpdb->prepare(
                "SELECT * FROM {$this->pets_table} WHERE hmo_id = %s",
                $hmo_id
            ));
            
            $coverage_limits = array(
                'Pawtastic' => 360000,
                'Furrtastic' => 1200000,
                'Purrfect' => 2200000
            );
            
            $total_coverage_limit = $coverage_limits[$pet->plan_type] ?? 0;
            $remaining_coverage = $total_coverage_limit - $total_coverage_used;
            
            return array(
                'service_usage' => $service_usage,
                'total_coverage_used' => $total_coverage_used,
                'remaining_coverage' => $remaining_coverage,
                'total_coverage_limit' => $total_coverage_limit,
                'plan_benefits' => array()
            );
        }
        
        private function parseClaimServices($claim) {
            $services = array();
            
            // Check if this is a NEW claim with detailed breakdown
            $has_detailed_breakdown = !empty($claim->custom_fees) && !empty($claim->quantities);
            
            if ($has_detailed_breakdown) {
                // NEW CLAIM: Parse detailed breakdown with real individual amounts
                $service_names = array();
                if (!empty($claim->services)) {
                    $services_data = json_decode($claim->services, true);
                    if (is_array($services_data) && json_last_error() === JSON_ERROR_NONE) {
                        $service_names = $services_data;
                    } else {
                        $service_names = array_map('trim', explode(',', $claim->services));
                    }
                }
                
                $custom_fees = array();
                if (!empty($claim->custom_fees)) {
                    $fees_data = json_decode($claim->custom_fees, true);
                    if (is_array($fees_data) && json_last_error() === JSON_ERROR_NONE) {
                        $custom_fees = $fees_data;
                    }
                }
                
                $quantities = array();
                if (!empty($claim->quantities)) {
                    $quantities_data = json_decode($claim->quantities, true);
                    if (is_array($quantities_data) && json_last_error() === JSON_ERROR_NONE) {
                        $quantities = $quantities_data;
                    }
                }
                
                // Combine service names with their real individual amounts
                foreach ($service_names as $index => $service_name) {
                    $service_name = trim($service_name);
                    if (empty($service_name)) continue;
                    
                    $individual_amount = 0;
                    if (isset($custom_fees[$index])) {
                        $individual_amount = floatval(str_replace(['₦', ',', ' '], '', $custom_fees[$index]));
                    } elseif (isset($custom_fees[$service_name])) {
                        $individual_amount = floatval(str_replace(['₦', ',', ' '], '', $custom_fees[$service_name]));
                    }
                    
                    $quantity = 1;
                    if (isset($quantities[$index])) {
                        $quantity = intval($quantities[$index]);
                    } elseif (isset($quantities[$service_name])) {
                        $quantity = intval($quantities[$service_name]);
                    }
                    
                    $final_amount = $individual_amount * $quantity;
                    
                    if ($final_amount > 0) {
                        $services[] = array(
                            'name' => $service_name,
                            'amount' => $final_amount
                        );
                    }
                }
                
            } else {
                // OLD CLAIM: Distribute total amount evenly across services
                $service_names = array();
                if (!empty($claim->services)) {
                    $services_data = json_decode($claim->services, true);
                    if (is_array($services_data) && json_last_error() === JSON_ERROR_NONE) {
                        $service_names = $services_data;
                    } else {
                        $service_names = array_map('trim', explode(',', $claim->services));
                    }
                }
                
                if (!empty($service_names)) {
                    $total_amount = floatval(str_replace(['₦', ',', ' '], '', $claim->total_amount));
                    $amount_per_service = $total_amount / count($service_names);
                    
                    foreach ($service_names as $service_name) {
                        $service_name = trim($service_name);
                        if (!empty($service_name)) {
                            $services[] = array(
                                'name' => $service_name,
                                'amount' => $amount_per_service
                            );
                        }
                    }
                }
            }
            
            return $services;
        }
        
        public function deductBenefitUsage($hmo_id, $claim_id, $services, $total_amount) {
            // This method is called when claims are approved
            return true; // Simplified for now
        }
    }
}

// ========================================
// AUTOMATED BENEFIT DEDUCTION HOOKS
// ========================================

/**
 * Hook into claim status changes to automatically deduct benefits
 */
add_action('skeepy_claim_status_changed', 'skeepy_auto_deduct_on_approval', 10, 3);

function skeepy_auto_deduct_on_approval($claim_id, $new_status, $old_status) {
    // Only deduct when claim moves to 'approved' or 'paid' status
    if (!in_array($new_status, ['approved', 'paid'])) {
        return;
    }
    
    // Don't deduct twice if already approved/paid
    if (in_array($old_status, ['approved', 'paid'])) {
        return;
    }
    
    global $wpdb;
    
    // Get claim details
    $claim = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE id = %d OR claim_id = %s",
        $claim_id, $claim_id
    ));
    
    if (!$claim) {
        error_log("Skeepy Auto Deduction: Claim not found - " . $claim_id);
        return;
    }
    
    // Initialize benefit tracker
    $tracker = new SkeepyBenefitTracker();
    
    // Deduct benefits
    $result = $tracker->deductBenefitUsage(
        $claim->patient_hmo_id,
        $claim->claim_id,
        $claim->services,
        $claim->total_amount
    );
    
    if ($result) {
        error_log("Skeepy Auto Deduction: Successfully deducted benefits for HMO " . $claim->patient_hmo_id . " - Claim " . $claim->claim_id);
    } else {
        error_log("Skeepy Auto Deduction: Failed to deduct benefits for HMO " . $claim->patient_hmo_id . " - Claim " . $claim->claim_id);
    }
}

/**
 * IMMEDIATE FIX: Process your latest claim manually
 */
add_action('init', 'skeepy_process_latest_claim_fix', 1);
function skeepy_process_latest_claim_fix() {
    // Only run once
    if (get_option('skeepy_latest_claim_processed')) {
        return;
    }
    
    global $wpdb;
    
    // Get the latest paid claim
    $latest_claim = $wpdb->get_row(
        "SELECT * FROM {$wpdb->prefix}skeepy_claims 
         WHERE status = 'paid' 
         ORDER BY submission_date DESC 
         LIMIT 1"
    );
    
    if ($latest_claim && $latest_claim->claim_id === 'SK-20250629-TEST01') {
        $tracker = new SkeepyBenefitTracker();
        $result = $tracker->deductBenefitUsage(
            $latest_claim->patient_hmo_id,
            $latest_claim->claim_id,
            $latest_claim->services,
            $latest_claim->total_amount
        );
        
        if ($result) {
            // Mark as processed
            update_option('skeepy_latest_claim_processed', true);
            error_log("Skeepy: Latest claim {$latest_claim->claim_id} processed successfully");
        }
    }
}

/**
 * Hook into WordPress post status changes (if claims are stored as posts)
 */
add_action('transition_post_status', 'skeepy_auto_deduct_on_post_status_change', 10, 3);

function skeepy_auto_deduct_on_post_status_change($new_status, $old_status, $post) {
    // Only process if this is a claim post type
    if ($post->post_type !== 'skeepy_claim') {
        return;
    }
    
    // Map post statuses to claim statuses
    $status_map = array(
        'publish' => 'approved',
        'paid' => 'paid'
    );
    
    $mapped_new_status = isset($status_map[$new_status]) ? $status_map[$new_status] : $new_status;
    $mapped_old_status = isset($status_map[$old_status]) ? $status_map[$old_status] : $old_status;
    
    // Trigger the auto deduction
    do_action('skeepy_claim_status_changed', $post->ID, $mapped_new_status, $mapped_old_status);
}

/**
 * Manual trigger for benefit deduction (can be called from admin interface)
 */
function skeepy_manual_deduct_benefits($claim_id) {
    global $wpdb;
    
    $claim = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE id = %d OR claim_id = %s",
        $claim_id, $claim_id
    ));
    
    if (!$claim) {
        return array('success' => false, 'message' => 'Claim not found');
    }
    
    if (!in_array($claim->status, ['approved', 'paid'])) {
        return array('success' => false, 'message' => 'Claim must be approved or paid to deduct benefits');
    }
    
    $tracker = new SkeepyBenefitTracker();
    $result = $tracker->deductBenefitUsage(
        $claim->patient_hmo_id,
        $claim->claim_id,
        $claim->services,
        $claim->total_amount
    );
    
    if ($result) {
        return array('success' => true, 'message' => 'Benefits deducted successfully');
    } else {
        return array('success' => false, 'message' => 'Failed to deduct benefits');
    }
}

// Register the shortcode
add_shortcode('skeepy_clinic_dashboard_mobile', 'skeepy_clinic_dashboard_mobile_shortcode');

// Add AJAX handler for logout
add_action('wp_ajax_skeepy_logout', 'skeepy_handle_logout');
add_action('wp_ajax_nopriv_skeepy_logout', 'skeepy_handle_logout');

// Add AJAX handler for patient verification
add_action('wp_ajax_skeepy_clinic_verify_patient', 'skeepy_clinic_verify_patient_handler');
add_action('wp_ajax_nopriv_skeepy_clinic_verify_patient', 'skeepy_clinic_verify_patient_handler');



// Add AJAX handler for getting clinic claims
add_action('wp_ajax_skeepy_get_clinic_claims', 'skeepy_get_clinic_claims_handler');
add_action('wp_ajax_nopriv_skeepy_get_clinic_claims', 'skeepy_get_clinic_claims_handler');

// Add AJAX handler for dashboard stats
add_action('wp_ajax_skeepy_get_dashboard_stats', 'skeepy_get_dashboard_stats_handler');
add_action('wp_ajax_nopriv_skeepy_get_dashboard_stats', 'skeepy_get_dashboard_stats_handler');

// Add AJAX handler for claims usage (NEW - for automated benefit deduction)
add_action('wp_ajax_skeepy_get_claims_usage', 'skeepy_get_claims_usage_handler');
add_action('wp_ajax_nopriv_skeepy_get_claims_usage', 'skeepy_get_claims_usage_handler');

// NEW: Add AJAX handlers for benefit tracking system
add_action('wp_ajax_skeepy_get_benefit_usage', 'skeepy_get_benefit_usage_handler');
add_action('wp_ajax_nopriv_skeepy_get_benefit_usage', 'skeepy_get_benefit_usage_handler');

add_action('wp_ajax_skeepy_auto_deduct_benefits', 'skeepy_auto_deduct_benefits_handler');
add_action('wp_ajax_nopriv_skeepy_auto_deduct_benefits', 'skeepy_auto_deduct_benefits_handler');



function skeepy_handle_logout() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'skeepy_logout_nonce')) {
        wp_die('Security check failed');
    }
    
    // Log out user
    wp_logout();
    
    // Redirect to clinic signin page
    wp_redirect('https://www.skeepy.co/clinic-signin');
    exit;
}

function skeepy_clinic_verify_patient_handler() {
    // DEBUG: Log that this function is being called
    error_log("FINAL-WORKING-DASHBOARD.php verification function called at " . date('Y-m-d H:i:s'));
    
    // Check if user is logged in first
    if (!is_user_logged_in()) {
        wp_send_json_error('User not logged in');
        return;
    }
    
    // Verify nonce but allow fallback if nonce fails after sign-in
    $nonce_valid = wp_verify_nonce($_POST['_wpnonce'], 'verify_patient_nonce');
    if (!$nonce_valid) {
        // Log the nonce failure but continue for now to debug
        error_log('Patient verification nonce failed - user may have just signed in');
    }
    
    $hmo_id = sanitize_text_field($_POST['hmo_id']);
    
    // If user entered only 6 characters, add the SKEEPYHMO- prefix
    if (strlen($hmo_id) === 6 && strpos($hmo_id, 'SKEEPYHMO-') === false) {
        $hmo_id = 'SKEEPYHMO-' . $hmo_id;
    }
    
    global $wpdb;
    
    // Search for patient in skeepy_pets table with proper prefix
    $patient = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_pets WHERE hmo_id = %s",
        $hmo_id
    ));
    
    // NO TEST DATA - Only use real data from database
    
    if ($patient) {
        // Calculate expiry date based on plan duration from approval/activation date
        $activation_date = (property_exists($patient, 'activation_date') && $patient->activation_date) ? $patient->activation_date : $patient->registration_date;
        $plan_duration = $patient->plan_duration;
        $expiry_date = '';
        
        if ($activation_date && $plan_duration) {
            $active_date = new DateTime($activation_date);
            switch (strtolower($plan_duration)) {
                case 'monthly':
                    $active_date->add(new DateInterval('P30D'));
                    break;
                case 'quarterly':
                    $active_date->add(new DateInterval('P90D'));
                    break;
                case 'annual':
                    $active_date->add(new DateInterval('P365D'));
                    break;
            }
            $expiry_date = $active_date->format('M j, Y');
        }
        
        // FIXED: Calculate age and birthday properly
        $pet_age = 0;
        $pet_birthday = '';

        // First, check if we have a valid birthday in the database
        if (!empty($patient->pet_birthday) && $patient->pet_birthday !== '0000-00-00' && $patient->pet_birthday !== '1970-01-01') {
            try {
                $dob = new DateTime($patient->pet_birthday);
                $today = new DateTime();
                
                // Validate that the birthday is not in the future
                if ($dob <= $today) {
                    $interval = $dob->diff($today);
                    $pet_age = $interval->y; // Calculate real age from birthday
                    $pet_birthday = $dob->format('M j, Y'); // Format: "Jan 1, 2023"
                } else {
                    // Birthday is in future, use stored age
                    $pet_age = intval($patient->pet_age ?? 0);
                    $pet_birthday = 'Invalid date (future date)';
                }
            } catch (Exception $e) {
                // If birthday parsing fails, fall back to stored age
                $pet_age = intval($patient->pet_age ?? 0);
                $pet_birthday = 'Invalid date format';
            }
        } else {
            // No valid birthday, use the stored age value
            $stored_age = intval($patient->pet_age ?? 0);
            if ($stored_age > 0) {
                $pet_age = $stored_age;
                // Don't show approximate year, just indicate birthday not provided
                $pet_birthday = 'Not provided';
            } else {
                // No age or birthday data
                $pet_age = 0;
                $pet_birthday = 'Not provided';
            }
        }
        
        // DEBUG: Log pet age and birthday processing
        error_log("Pet Data Processing - Age Raw: " . var_export($patient->pet_age, true) . ", Age Calculated: $pet_age Years, Birthday Display: $pet_birthday");

        // NEW: Get benefit usage using the tracker
        $tracker = new SkeepyBenefitTracker();
        $benefit_data = $tracker->calculateUsedBenefits($hmo_id);
        


        wp_send_json_success(array(
            'pet_name' => $patient->pet_name ?? '',
            'hmo_id' => $patient->hmo_id ?? '',
            'pet_type' => $patient->pet_type ?? '',
            'plan_type' => $patient->plan_type ?? '',
            'plan_duration' => $patient->plan_duration ?? '',
            'plan_status' => 'Active',
            'expiry_date' => $expiry_date,
            'activation_date' => $activation_date,
            'pet_breed' => $patient->pet_breed ?? '',
            'pet_gender' => $patient->pet_gender ?? '',
            'pet_color' => $patient->pet_color ?? '',
            'pet_age' => $pet_age,
            'pet_birthday' => $pet_birthday,
            'guardian_name' => trim(($patient->guardian_first_name ?? '') . ' ' . ($patient->guardian_surname ?? $patient->guardian_last_name ?? '')),
            'guardian_phone' => $patient->guardian_phone ?? '',
            'guardian_email' => $patient->guardian_email ?? '',
            'guardian_address' => $patient->guardian_address ?? '',
            // NEW: Include benefit usage data
            'service_usage' => isset($benefit_data['service_usage']) ? $benefit_data['service_usage'] : array(),
            'total_coverage_used' => isset($benefit_data['total_coverage_used']) ? $benefit_data['total_coverage_used'] : 0,
            'remaining_coverage' => isset($benefit_data['remaining_coverage']) ? $benefit_data['remaining_coverage'] : 0,
            'total_coverage_limit' => isset($benefit_data['total_coverage_limit']) ? $benefit_data['total_coverage_limit'] : 0,
            'plan_benefits' => isset($benefit_data['plan_benefits']) ? $benefit_data['plan_benefits'] : array()
        ));
    } else {
        wp_send_json_error('HMO ID does not exist.');
    }
}



function skeepy_get_clinic_claims_handler() {
    global $wpdb;
    
    // Check if user is logged in first
    if (!is_user_logged_in()) {
        wp_send_json_error('User not logged in');
        return;
    }
    
    // Verify nonce for security - but allow fallback if nonce fails after sign-in
    $nonce_valid = wp_verify_nonce($_POST['nonce'], 'clinic_dashboard_nonce');
    if (!$nonce_valid) {
        // Log the nonce failure but continue for now to debug
        error_log('Claims handler nonce verification failed - user may have just signed in');
    }
    
    // Use exact same table reference as admin interface
    $claims_table = $wpdb->prefix . 'skeepy_claims';
    
    // Get current user information
    $current_user = wp_get_current_user();
    $user_email = $current_user->user_email;
    
    // Additional debug logging
    error_log('Claims handler called for user: ' . $user_email);
    
    // Get clinic data using same logic as admin interface
    $clinic_data = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_clinics WHERE rep_email = %s OR clinic_email = %s",
        $user_email, $user_email
    ));
    
    // Process filter parameters
    $date_filter = isset($_POST['date_filter']) ? sanitize_text_field($_POST['date_filter']) : '';
    $status_filter = isset($_POST['status_filter']) ? sanitize_text_field($_POST['status_filter']) : '';
    $date_from = isset($_POST['date_from']) ? sanitize_text_field($_POST['date_from']) : '';
    $date_to = isset($_POST['date_to']) ? sanitize_text_field($_POST['date_to']) : '';
    
    // Build WHERE clause for filters
    $where_conditions = array();
    $where_params = array();
    
    // FILTER BY CLINIC: Only show claims from the logged-in clinic
    if ($clinic_data) {
        $where_conditions[] = "(provider_id = %s OR clinic_name = %s)";
        $where_params[] = $clinic_data->provider_id;
        $where_params[] = $clinic_data->clinic_name;
    } else {
        // If no clinic data found, don't show any claims
        $where_conditions[] = "1 = 0";
    }
    
    // Apply date filter
    if ($date_filter === 'week') {
        $where_conditions[] = "submission_date >= DATE_SUB(NOW(), INTERVAL 7 DAY)";
    } elseif ($date_filter === 'month') {
        $where_conditions[] = "submission_date >= DATE_SUB(NOW(), INTERVAL 1 MONTH)";
    } elseif ($date_filter === 'custom' && $date_from && $date_to) {
        $where_conditions[] = "DATE(submission_date) >= %s AND DATE(submission_date) <= %s";
        $where_params[] = $date_from;
        $where_params[] = $date_to;
    }
    
    // Apply status filter
    if ($status_filter) {
        $where_conditions[] = "status = %s";
        $where_params[] = $status_filter;
    }
    
    // Build final query
    $query = "SELECT * FROM $claims_table";
    if (!empty($where_conditions)) {
        $query .= " WHERE " . implode(" AND ", $where_conditions);
    }
    $query .= " ORDER BY submission_date DESC";
    
    // Execute filtered query for table
    if (!empty($where_params)) {
        $filtered_claims = $wpdb->get_results($wpdb->prepare($query, $where_params));
    } else {
        $filtered_claims = $wpdb->get_results($query);
    }
    
    // Always get latest 10 claims for Recent Claims section (filtered by clinic)
    if ($clinic_data) {
        $recent_claims = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM $claims_table WHERE (provider_id = %s OR clinic_name = %s) ORDER BY submission_date DESC LIMIT 10",
            $clinic_data->provider_id, $clinic_data->clinic_name
        ));
    } else {
        $recent_claims = array(); // No claims if no clinic data
    }
    
    // Generate HTML response with separate data for table and recent claims
    $html = '';
    
    // Build main claims table using filtered data
    $html .= '<div class="claims-table-container">';
    
    if (!empty($filtered_claims)) {
        $html .= '<div class="claims-table-wrapper">';
        $html .= '<table class="claims-table">';
        $html .= '<thead><tr>';
        $html .= '<th>Date</th><th>Claim ID</th><th>Amount</th><th>Status</th>';
        $html .= '</tr></thead><tbody>';
        
        foreach ($filtered_claims as $claim) {
            // Use exact same amount formatting as admin interface
            $amount = (float)str_replace(array('₦', ','), '', $claim->total_amount);
            $formatted_amount = '₦' . number_format($amount);
            
            $html .= '<tr>';
            $html .= '<td>' . date('M j, Y', strtotime($claim->submission_date)) . '</td>';
            $html .= '<td>' . esc_html($claim->claim_id) . '</td>';
            $html .= '<td class="claim-amount">' . $formatted_amount . '</td>';
            $html .= '<td><span class="status-badge status-' . strtolower($claim->status) . '">' . ucfirst($claim->status) . '</span></td>';
            $html .= '</tr>';
        }
        
        $html .= '</tbody></table>';
        $html .= '</div>';
        
        // Pagination info for table only with more spacing
        $html .= '<div class="pagination-container" style="margin-top: 20px;">';
        $html .= '<div class="pagination-info">';
        $html .= 'Showing 1-' . count($filtered_claims) . ' of ' . count($filtered_claims) . ' claims';
        $html .= '</div>';
        $html .= '</div>';
    } else {
        $html .= '<div class="no-claims-message">';
        $html .= '<h3>No Claims Found</h3>';
        $html .= '<p>No claims match the selected filters.</p>';
        $html .= '</div>';
    }
    
    $html .= '</div>';
    
    // Add Recent Claims Section (always shows latest 10, unfiltered)
    if (!empty($recent_claims)) {
        $html .= '<div class="recent-claims-section">';
        $html .= '<h3>Recent Claims</h3>';
        $html .= '<div class="recent-claims-list">';
        
        foreach ($recent_claims as $claim) {
            $amount = (float)str_replace(array('₦', ','), '', $claim->total_amount);
            $formatted_amount = '₦' . number_format($amount);
            
            $html .= '<div class="recent-claim-item">';
            $html .= '<div class="claim-info">';
            $html .= '<span class="claim-id">' . esc_html($claim->claim_id) . '</span>';
            $html .= '<span class="claim-date">' . date('M j, Y', strtotime($claim->submission_date)) . '</span>';
            $html .= '</div>';
            $html .= '<div class="recent-claim-amount">' . $formatted_amount . ' <span class="status-badge status-' . strtolower($claim->status) . '">' . ucfirst($claim->status) . '</span></div>';
            $html .= '</div>';
        }
        
        $html .= '</div>';
        $html .= '</div>';
    }
    
    wp_send_json_success(array('html' => $html));
    return;
    
    // No claims found
    wp_send_json_success(array(
        'html' => $debug_info . '<div class="no-claims-message">
            <div class="empty-state-icon">📋</div>
            <h3>No Claims Found</h3>
            <p>No claims exist in the database.</p>
        </div>'
    ));
}

function skeepy_get_dashboard_stats_handler() {
    global $wpdb;
    
    // Check if user is logged in first
    if (!is_user_logged_in()) {
        wp_send_json_error('User not logged in');
        return;
    }
    
    // Verify nonce for security - but allow fallback if nonce fails after sign-in
    $nonce_valid = wp_verify_nonce($_POST['nonce'], 'dashboard_stats_nonce');
    if (!$nonce_valid) {
        // Log the nonce failure but continue for now to debug
        error_log('Dashboard stats nonce verification failed - user may have just signed in');
    }
    
    // Get current user information
    $current_user = wp_get_current_user();
    $user_email = $current_user->user_email;
    
    // Additional debug logging
    error_log('Dashboard stats handler called for user: ' . $user_email);
    
    // Get clinic data
    $clinic_data = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_clinics WHERE rep_email = %s OR clinic_email = %s",
        $user_email, $user_email
    ));
    
    if (!$clinic_data) {
        wp_send_json_success(array(
            'pending_claims' => 0,
            'total_payments' => 0,
            'approved_claims' => 0,
            'total_skeepers' => 0
        ));
        return;
    }
    
    $claims_table = $wpdb->prefix . 'skeepy_claims';
    
    // Calculate pending claims payment (non-paid claims total)
    $pending_amount = $wpdb->get_var($wpdb->prepare(
        "SELECT SUM(CAST(REPLACE(REPLACE(total_amount, '₦', ''), ',', '') AS DECIMAL(10,2))) 
         FROM $claims_table 
         WHERE (provider_id = %s OR clinic_name = %s) AND status != 'paid'",
        $clinic_data->provider_id, $clinic_data->clinic_name
    ));
    
    // Calculate total payments received (paid claims)
    $total_payments = $wpdb->get_var($wpdb->prepare(
        "SELECT SUM(CAST(REPLACE(REPLACE(total_amount, '₦', ''), ',', '') AS DECIMAL(10,2))) 
         FROM $claims_table 
         WHERE (provider_id = %s OR clinic_name = %s) AND status = 'paid'",
        $clinic_data->provider_id, $clinic_data->clinic_name
    ));
    
    // Count approved claims (includes both 'approved' and 'paid' status)
    $approved_claims = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $claims_table 
         WHERE (provider_id = %s OR clinic_name = %s) AND status IN ('approved', 'paid')",
        $clinic_data->provider_id, $clinic_data->clinic_name
    ));
    
    // Count unique HMO IDs (Total Skeepers Served)
    $total_skeepers = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(DISTINCT patient_hmo_id) FROM $claims_table 
         WHERE (provider_id = %s OR clinic_name = %s)",
        $clinic_data->provider_id, $clinic_data->clinic_name
    ));
    
    wp_send_json_success(array(
        'pending_claims' => floatval($pending_amount ?? 0),
        'total_payments' => floatval($total_payments ?? 0),
        'approved_claims' => intval($approved_claims ?? 0),
        'total_skeepers' => intval($total_skeepers ?? 0)
    ));
}

function skeepy_clinic_dashboard_mobile_shortcode($atts) {
    // Get current user info and fetch clinic data from database
    global $wpdb;
    $current_user = wp_get_current_user();
    
    // Fetch clinic data from skeepy_clinics table using current user email
    $clinic_data = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_clinics WHERE clinic_email = %s",
        $current_user->user_email
    ));
    
    // Use actual clinic data if found
    if ($clinic_data) {
        $first_name = $clinic_data->rep_first_name;
        $clinic_name = $clinic_data->clinic_name;
        $provider_id = $clinic_data->provider_id;
        $clinic_email = $clinic_data->clinic_email;
        $clinic_status = $clinic_data->application_status;
        $services_offered = $clinic_data->services_offered;
        $clinic_phone = $clinic_data->clinic_phone;
        $clinic_address = $clinic_data->clinic_address;
        $rep_last_name = $clinic_data->rep_last_name;
        $job_title = $clinic_data->job_title;
        $vcn_number = $clinic_data->vcn_number;
    } else {
        // If no clinic data found, user might not be registered
        $first_name = $current_user->first_name ?: $current_user->display_name;
        $clinic_name = 'Unregistered Clinic';
        $provider_id = 'Not Assigned';
        $clinic_email = $current_user->user_email;
        $clinic_status = 'unregistered';
        $services_offered = '';
        $clinic_phone = '';
        $clinic_address = '';
        $rep_last_name = '';
        $job_title = '';
        $vcn_number = '';
    }

    // Time-based greeting with user's local timezone
    $greeting = 'Good Morning'; // Default fallback, will be updated by JavaScript

    ob_start();
    ?>
    <div class="skeepy-mobile-dashboard">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer">
        <style>
            @import url('https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@300;400;500;600;700;800&display=swap');
            
            .skeepy-mobile-dashboard {
                font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
                background: #f9edd7;
                color: #145362;
                line-height: 1.4;
                font-size: 14px;
                margin: -20px;
                padding: 0;
                min-height: 100vh;
            }
            
            .skeepy-mobile-dashboard * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }
            
            .skeepy-mobile-dashboard html,
            .skeepy-mobile-dashboard body {
                height: 100%;
                overflow-x: hidden;
            }
            
            /* Mobile Layout - Default */
            .dashboard-container {
                min-height: 100vh;
                display: flex;
                flex-direction: column;
            }
            
            /* Mobile Header - Hidden */
            .mobile-header {
                display: none;
            }
            
            /* Mobile Main Content */
            .main-content {
                flex: 1;
                padding: 20px;
                max-width: 100%;
            }
            
            /* Content Section Management */
            .content-section {
                display: none;
            }
            
            .content-section.active {
                display: block;
            }
            
            /* Back button for sections */
            .back-button {
                background: none;
                border: none;
                color: #145362;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                margin-bottom: 20px;
                padding: 10px 0;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: all 0.2s ease;
            }
            
            .back-button:hover {
                color: #0F4A5A;
            }
            
            .back-button i {
                font-size: 14px;
            }
            
            /* Greeting section */
            .greeting-section {
                margin-top: 24px;
                margin-bottom: 16px;
            }
            
            .greeting-section h2 {
                font-size: 24px;
                font-weight: 600;
                color: #145362;
                margin-bottom: 4px;
                line-height: 1.2;
            }
            
            .greeting-section p {
                font-size: 14px;
                color: #6B7280;
                font-weight: 400;
            }

            /* Status Info Bar */
            .status-info-bar {
                background: white;
                border-radius: 12px;
                padding: 16px 20px;
                margin-bottom: 24px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border: 1px solid #E5E7EB;
            }

            .status-info-bar p {
                font-size: 14px;
                color: #6B7280;
                font-weight: 400;
                margin-bottom: 8px;
            }

            .status-info-bar p:last-child {
                margin-bottom: 0;
            }
            
            /* Balance Card - Mobile */
            .balance-card {
                background: linear-gradient(135deg, #145362 0%, #0F4A5A 100%);
                border-radius: 16px;
                padding: 24px 20px;
                margin-bottom: 24px;
                position: relative;
                overflow: hidden;
                box-shadow: 0 4px 20px rgba(20, 83, 98, 0.15);
            }
            
            .balance-card::before {
                content: '';
                position: absolute;
                top: -50%;
                right: -20%;
                width: 100px;
                height: 100px;
                background: radial-gradient(circle, rgba(249, 237, 215, 0.08) 0%, transparent 70%);
                pointer-events: none;
            }
            
            .balance-top {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 16px;
                position: relative;
                z-index: 2;
            }
            
            .balance-label {
                font-size: 14px;
                font-weight: 500;
                color: rgba(255, 255, 255, 0.8);
            }
            
            .refresh-btn {
                width: 32px;
                height: 32px;
                background: rgba(255, 255, 255, 0.15);
                border: none;
                border-radius: 8px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                cursor: pointer;
                transition: all 0.2s ease;
                font-size: 14px;
            }
            
            .refresh-btn:hover {
                background: rgba(255, 255, 255, 0.2);
            }
            
            .refresh-btn.rotating {
                animation: rotate 1s linear infinite;
            }
            
            @keyframes rotate {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
            
            .balance-amount {
                font-size: 36px;
                font-weight: 700;
                color: white;
                line-height: 1;
                margin-bottom: 12px;
                position: relative;
                z-index: 2;
                letter-spacing: -1px;
            }
            
            .balance-amount .naira {
                font-size: 28px;
                font-weight: 600;
                margin-right: 2px;
            }
            
            .update-time {
                font-size: 12px;
                color: rgba(255, 255, 255, 0.7);
                position: relative;
                z-index: 2;
                display: block;
            }
            
            /* Stats Grid - Mobile Stack */
            .stats-grid {
                display: grid;
                grid-template-columns: 1fr;
                gap: 16px;
                margin-bottom: 24px;
            }
            
            .stat-card {
                background: white;
                border-radius: 12px;
                padding: 20px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border: 1px solid #E5E7EB;
                position: relative;
                overflow: hidden;
            }
            
            .stat-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: linear-gradient(90deg, #145362 0%, #f9edd7 100%);
                opacity: 0;
                transition: opacity 0.3s ease;
            }
            
            .stat-card:hover::before {
                opacity: 1;
            }
            
            .stat-top {
                display: flex;
                justify-content: flex-start;
                align-items: center;
                margin-bottom: 16px;
            }
            
            .stat-icon {
                width: 44px;
                height: 44px;
                border-radius: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 16px;
                font-size: 20px;
                color: white;
                position: relative;
            }
            
            .stat-icon.payments {
                background: linear-gradient(135deg, #059669 0%, #10B981 100%);
            }
            
            .stat-icon.claims {
                background: linear-gradient(135deg, #2563EB 0%, #3B82F6 100%);
            }
            
            .stat-icon.skeepers {
                background: linear-gradient(135deg, #DC2626 0%, #EF4444 100%);
            }
            
            .stat-title {
                font-size: 14px;
                color: #6B7280;
                font-weight: 500;
                margin-bottom: 8px;
            }
            
            .stat-value {
                font-size: 24px;
                font-weight: 700;
                color: #145362;
                line-height: 1;
            }
            
            /* Quick Actions */
            .actions-section {
                margin-bottom: 32px;
            }
            
            .section-header {
                font-size: 18px;
                font-weight: 700;
                color: #145362;
                margin-bottom: 16px;
            }
            
            .actions-list {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 12px;
            }
            
            .action-item {
                background: white;
                border: 1px solid #E5E7EB;
                border-radius: 12px;
                padding: 20px 16px;
                text-align: center;
                cursor: pointer;
                transition: all 0.2s ease;
                text-decoration: none;
                color: #374151;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 8px;
                height: 84px;
                justify-content: center;
            }
            
            .action-item:hover {
                border-color: #145362;
                box-shadow: 0 4px 12px rgba(20, 83, 98, 0.1);
                transform: translateY(-2px);
            }
            
            .action-item i {
                font-size: 20px;
                color: #145362;
                width: 24px;
                height: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                background: #F8FAFC;
                border-radius: 8px;
                padding: 12px;
            }
            
            .action-item span {
                font-size: 12px;
                font-weight: 600;
                color: #374151;
                text-align: center;
                line-height: 1.2;
                max-width: 100%;
                word-wrap: break-word;
                hyphens: auto;
            }
            
            /* Section Headers */
            .section-header-main {
                margin-bottom: 24px;
                padding-bottom: 16px;
                border-bottom: 1px solid #E5E7EB;
            }
            
            .section-header-main h2 {
                font-size: 24px;
                font-weight: 700;
                color: #145362;
                margin-bottom: 4px;
            }
            
            .section-header-main p {
                font-size: 14px;
                color: #6B7280;
            }
            
            /* Info Grid for profile and services */
            .info-grid {
                display: grid;
                gap: 16px;
                margin-bottom: 24px;
            }
            
            .info-card {
                background: white;
                border-radius: 12px;
                padding: 20px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border: 1px solid #E5E7EB;
            }
            
            .info-card h3 {
                font-size: 16px;
                font-weight: 600;
                color: #145362;
                margin-bottom: 16px;
                display: flex;
                align-items: center;
                gap: 8px;
            }
            
            .info-card h3 i {
                font-size: 18px;
                color: #145362;
            }
            
            .info-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 0;
                border-bottom: 1px solid #F3F4F6;
            }
            
            .info-item:last-child {
                border-bottom: none;
            }

            .coverage-benefits {
                margin-top: 15px;
            }

            .benefit-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 12px 15px;
                margin: 8px 0;
                border-radius: 8px;
                border-left: 4px solid #E5E7EB;
                background: #F9FAFB;
            }

            .benefit-item.benefit-available {
                border-left-color: #10B981;
                background: #ECFDF5;
            }

            .benefit-item.benefit-waiting {
                border-left-color: #F59E0B;
                background: #FFFBEB;
            }

            .benefit-name {
                font-weight: 600;
                color: #111827;
                flex: 1;
            }

            .benefit-coverage {
                color: #6B7280;
                font-size: 14px;
                margin: 0 15px;
                min-width: 120px;
                text-align: center;
            }

            .benefit-status {
                font-size: 12px;
                padding: 4px 8px;
                border-radius: 4px;
                font-weight: 500;
                min-width: 100px;
                text-align: center;
            }

            .benefit-available .benefit-status {
                background: #10B981;
                color: white;
            }

            .benefit-waiting .benefit-status {
                background: #F59E0B;
                color: white;
            }
            
            .info-label {
                font-size: 14px;
                color: #6B7280;
                font-weight: 500;
            }
            
            .info-value {
                font-size: 14px;
                color: #145362;
                font-weight: 600;
                text-align: right;
                max-width: 60%;
                word-wrap: break-word;
            }
            
            /* Services specific styling - FORCE CENTER ALIGNMENT */
            .services-grid * {
                text-align: center !important;
            }
            
            .service-item .service-name,
            .service-item .service-pricing,
            .service-item .original-fee,
            .service-item .discounted-fee {
                text-align: center !important;
                display: block !important;
                width: 100% !important;
            }
            
            .service-item .discount-badge {
                text-align: center !important;
                display: inline-block !important;
                width: auto !important;
                margin: 4px auto !important;
            }
            
            .service-pricing * {
                text-align: center !important;
                margin: 2px auto !important;
            }
            
            .service-item {
                background: #F8FAFC;
                border-radius: 8px;
                padding: 12px 16px;
                margin-bottom: 8px;
                display: block;
                text-align: center !important;
            }
            
            .service-item:last-child {
                margin-bottom: 0;
            }
            
            .service-name {
                font-size: 14px;
                color: #374151;
                font-weight: 500;
                text-align: center !important;
            }
            
            .service-fee {
                font-size: 14px;
                color: #145362;
                font-weight: 600;
                text-align: center !important;
            }
            
            .discounted-fee {
                font-size: 16px;
                color: #145362;
                font-weight: 700;
                text-align: center !important;
            }
            
            .discount-badge {
                background: #145362;
                color: white;
                font-size: 11px;
                font-weight: 600;
                padding: 4px 8px;
                border-radius: 6px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                display: inline-block;
                text-align: center !important;
            }
            
            .empty-state {
                text-align: center;
                padding: 40px 20px;
                color: #6B7280;
            }
            
            .empty-state i {
                font-size: 48px;
                margin-bottom: 16px;
                color: #E5E7EB;
            }
            
            .empty-state h3 {
                font-size: 18px;
                font-weight: 600;
                margin-bottom: 8px;
                color: #374151;
            }
            
            .empty-state p {
                font-size: 14px;
                color: #6B7280;
            }
            
            /* Claims Dashboard Styles */
            .claims-filters {
                background: white;
                border-radius: 12px;
                padding: 20px;
                margin-bottom: 20px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border: 1px solid #E5E7EB;
            }
            
            /* Recent Claims Section */
            .recent-claims-section {
                background: white;
                border-radius: 12px;
                padding: 20px;
                margin-top: 20px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border: 1px solid #E5E7EB;
            }
            
            .recent-claims-section h3 {
                margin: 0 0 16px 0;
                font-size: 18px;
                font-weight: 600;
                color: #145362;
            }
            
            .recent-claim-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 12px 0;
                border-bottom: 1px solid #F3F4F6;
            }
            
            .recent-claim-item:last-child {
                border-bottom: none;
            }
            
            .claim-info {
                display: flex;
                flex-direction: column;
                gap: 4px;
            }
            
            .claim-id {
                font-weight: 600;
                color: #145362;
                font-size: 14px;
            }
            
            .claim-date {
                font-size: 12px;
                color: #6B7280;
            }
            
            .recent-claim-item .claim-amount {
                font-weight: 600;
                color: #10B981;
                font-size: 16px;
            }
            
            .filter-row {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 16px;
                align-items: end;
            }
            
            .filter-group {
                display: flex;
                flex-direction: column;
                gap: 8px;
            }
            
            .filter-group label {
                font-size: 14px;
                font-weight: 600;
                color: #374151;
            }
            
            .filter-input {
                padding: 12px 16px;
                border: 2px solid #E5E7EB;
                border-radius: 8px;
                font-size: 14px;
                transition: all 0.2s ease;
            }
            
            .filter-input:focus {
                outline: none;
                border-color: #145362;
                box-shadow: 0 0 0 3px rgba(20, 83, 98, 0.1);
            }
            
            .filter-btn {
                background: #145362;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                gap: 8px;
                grid-column: 1 / -1;
                justify-self: start;
                margin-top: 16px;
            }
            
            .filter-btn:hover {
                background: #0F4A5A;
                transform: translateY(-1px);
            }
            
            .claims-table-container {
                background: white;
                border-radius: 12px;
                overflow: hidden;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border: 1px solid #E5E7EB;
                margin-bottom: 20px;
            }
            
            .claims-table {
                width: 100%;
                border-collapse: collapse;
            }
            
            .claims-table th {
                background: #F8FAFC;
                padding: 16px 12px;
                text-align: left;
                font-size: 12px;
                font-weight: 600;
                color: #6B7280;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                border-bottom: 1px solid #E5E7EB;
            }
            
            .claims-table td {
                padding: 16px 12px;
                border-bottom: 1px solid #F3F4F6;
                font-size: 14px;
                color: #374151;
            }
            
            .claims-table tbody tr:hover {
                background: #F8FAFC;
            }
            
            .status-badge {
                padding: 4px 12px;
                border-radius: 20px;
                font-size: 12px;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            .status-pending {
                background: #FEF3C7;
                color: #D97706;
            }
            
            .status-approved {
                background: #D1FAE5;
                color: #059669;
            }
            
            .status-rejected {
                background: #FEE2E2;
                color: #DC2626;
            }
            
            .status-paid {
                background: #DBEAFE;
                color: #2563EB;
            }
            
            .pagination-container {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 32px;
                padding: 0 4px;
            }
            
            .pagination-info {
                font-size: 14px;
                color: #6B7280;
            }
            
            .pagination-controls {
                display: flex;
                align-items: center;
                gap: 16px;
            }
            
            .pagination-btn {
                background: white;
                border: 1px solid #E5E7EB;
                border-radius: 8px;
                padding: 8px 16px;
                font-size: 14px;
                font-weight: 500;
                color: #374151;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                gap: 8px;
            }
            
            .pagination-btn:hover:not(:disabled) {
                background: #F8FAFC;
                border-color: #145362;
            }
            
            .pagination-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            .page-indicator {
                font-size: 14px;
                color: #374151;
                font-weight: 500;
            }
            
            .recent-claims-section {
                background: white;
                border-radius: 12px;
                padding: 24px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border: 1px solid #E5E7EB;
            }
            
            .recent-claims-section h3 {
                font-size: 18px;
                font-weight: 600;
                color: #145362;
                margin-bottom: 20px;
            }
            
            .recent-claims-list {
                display: grid;
                gap: 12px;
            }
            
            .recent-claim-item {
                background: #F8FAFC;
                border-radius: 8px;
                padding: 12px;
                border-left: 4px solid #145362;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: space-between;
                gap: 8px;
            }
            
            .recent-claim-item:hover {
                background: #F1F5F9;
                transform: translateY(-1px);
            }
            
            .claim-info {
                display: flex;
                flex-direction: column;
                align-items: flex-start;
                flex: 0 0 auto;
                min-width: 0;
            }
            
            .claim-id {
                font-size: 12px;
                font-weight: 600;
                color: #145362;
                word-break: break-all;
                line-height: 1.2;
            }
            
            .claim-date {
                font-size: 11px;
                color: #6B7280;
                margin-top: 2px;
            }
            
            .recent-claim-amount {
                font-size: 14px;
                font-weight: 600;
                color: #374151;
                display: flex;
                align-items: center;
                gap: 8px;
                flex-wrap: nowrap;
            }
            
            /* Mobile adjustments for Recent Claims */
            @media (max-width: 768px) {
                .recent-claim-amount {
                    font-size: 12px;
                    gap: 6px;
                }
                
                .recent-claim-amount .status-badge {
                    font-size: 10px;
                    padding: 2px 6px;
                    white-space: nowrap;
                }
            }
            
            .recent-claim-date {
                font-size: 12px;
                color: #6B7280;
            }
            
            /* Modal Styles */
            .verification-modal,
            .support-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 99999;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
                padding: 20px;
            }
            
            .verification-modal.active,
            .support-modal.active {
                opacity: 1;
                visibility: visible;
            }
            
            .modal-dialog {
                background: white;
                border-radius: 16px;
                width: 100%;
                max-width: 480px;
                max-height: 90vh;
                overflow-y: auto;
                position: relative;
                animation: modalSlideUp 0.3s ease;
            }
            
            @keyframes modalSlideUp {
                from {
                    transform: translateY(30px);
                    opacity: 0;
                }
                to {
                    transform: translateY(0);
                    opacity: 1;
                }
            }
            
            .modal-header {
                padding: 20px 24px 8px 24px;
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 20px;
            }
            
            .modal-title {
                font-size: 20px;
                font-weight: 700;
                color: #f9edd7;
            }
            
            .modal-close {
                background: none;
                border: none;
                font-size: 18px;
                color: #6B7280;
                cursor: pointer;
                padding: 4px;
                transition: color 0.2s ease;
            }
            
            .modal-close:hover {
                color: #374151;
            }
            
            .modal-body {
                padding: 0 24px 24px 24px;
            }
            
            .form-input {
                width: 100%;
                padding: 12px 16px;
                border: 2px solid #E5E7EB;
                border-radius: 8px;
                font-size: 14px;
                transition: all 0.2s ease;
                margin-bottom: 16px;
            }
            
            .form-input:focus {
                outline: none;
                border-color: #145362;
                box-shadow: 0 0 0 3px rgba(20, 83, 98, 0.1);
            }
            
            .save-btn {
                width: 100%;
                background: #145362;
                color: white;
                padding: 16px 24px;
                border: none;
                border-radius: 12px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
            }
            
            .save-btn:hover {
                background: #0F4A5A;
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(20, 83, 98, 0.3);
            }
            
            .save-btn.show {
                display: flex;
            }
            
            .support-item {
                display: flex;
                align-items: center;
                gap: 16px;
                padding: 16px;
                background: #F8FAFC;
                border-radius: 12px;
                margin-bottom: 12px;
                text-decoration: none;
                color: inherit;
                transition: all 0.2s ease;
            }
            
            .support-item:hover {
                background: #E2E8F0;
                transform: translateY(-1px);
                text-decoration: none;
                color: inherit;
            }
            
            .support-item:last-child {
                margin-bottom: 0;
            }
            
            .support-modal .support-item i {
                width: 40px;
                height: 40px;
                background: #145362 !important;
                color: white !important;
                border-radius: 10px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
                transition: all 0.2s ease;
                margin-right: 0 !important;
            }
            
            .support-modal .support-item:hover i {
                background: #0F4A5A !important;
            }
            
            .support-text {
                flex: 1;
            }
            
            .support-label {
                font-size: 14px;
                color: #6B7280;
                font-weight: 500;
                margin-bottom: 2px;
            }
            
            .support-value {
                font-size: 16px;
                color: #145362;
                font-weight: 600;
            }
            
            @media (max-width: 768px) {
                .filter-row {
                    grid-template-columns: 1fr;
                    gap: 16px;
                }
                
                .filter-btn {
                    grid-column: 1;
                }
                
                .claims-table th,
                .claims-table td {
                    padding: 12px 8px;
                    font-size: 12px;
                }
                
                .pagination-container {
                    flex-direction: column;
                    gap: 16px;
                    text-align: center;
                }
                
                .pagination-controls {
                    justify-content: center;
                }
            }
            
            /* Enhanced CSS from dashboard-greeting-block attachment */
            .dashboard-greeting-block {
              margin: 40px 0 30px;
              padding: 0 20px;
              text-align: left;
              color: #145362;
              font-family: "Inter", sans-serif;
            }

            .dashboard-greeting-block h2 {
              font-size: clamp(22px, 5vw, 28px);
              font-weight: 700;
              color: #145362;
              margin: 0;
              line-height: 1.2;
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
            }

            .dashboard-greeting-block .clinic-subtext {
              font-size: clamp(14px, 4vw, 16px);
              color: #444;
              margin-top: 8px;
              line-height: 1.5;
            }

            .clinic-dashboard-section {
              padding: 20px;
              margin-bottom: 25px;
              background: #fff;
              border-radius: 12px;
              box-shadow: 0 1px 4px rgba(0,0,0,0.04);
            }

            .clinic-dashboard-section h3 {
              font-size: 16px;
              font-weight: 600;
              color: #222;
              margin-bottom: 10px;
            }

            .clinic-dashboard-section p,
            .clinic-dashboard-section li,
            .clinic-dashboard-section a {
              font-size: 14px;
              color: #444;
              line-height: 1.6;
            }

            body.logged-in header,
            body.logged-in footer {
              display: none !important;
            }

            .clinic-header-bar h1 {
              font-size: clamp(20px, 4vw, 26px);
              font-weight: 600;
              color: #222;
              margin: 0;
              text-align: right;
              flex-shrink: 1;
              max-width: 75%;
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
            }

            .dashboard-header-top {
              background-color: #145362;
              padding: 10px 20px;
              border-radius: 0 0 12px 12px;
              margin-bottom: 24px;
            }

            .dashboard-header-top .dashboard-divider {
              border: none;
              border-top: 1px solid rgba(255, 255, 255, 0.3);
              margin: 6px 0;
            }

            .dashboard-datetime {
              color: #f9edd7;
              font-size: 14px;
              font-weight: 500;
              text-align: center;
              padding: 4px 0;
            }

            .quick-access-section {
              margin-top: 20px;
              background-color: #ffffff;
              border-radius: 16px;
              padding: 20px;
              box-shadow:
                0 1px 2px rgba(0, 0, 0, 0.08),
                0 4px 10px rgba(0, 0, 0, 0.12);
              transition: box-shadow 0.3s ease;
            }

            .quick-access-title {
              font-size: 16px;
              font-weight: 600;
              margin-bottom: 12px;
              color: #145362;
            }

            .quick-access-grid {
              display: grid;
              grid-template-columns: repeat(3, 1fr);
              gap: 16px;
            }

            .quick-access-item {
              display: flex;
              flex-direction: column;
              align-items: center;
              text-align: center;
              text-decoration: none;
              color: #333;
              font-size: 13px;
              font-weight: 500;
            }

            .icon-circle {
              background-color: #f9edd7;
              width: 48px;
              height: 48px;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              margin-bottom: 6px;
            }

            .icon-circle img {
              width: 24px;
              height: 24px;
              object-fit: contain;
            }

            .outer-pending-wrapper {
              background-color: #ffffff;
              padding: 12px;
              border-radius: 20px;
              margin-bottom: 20px;
              box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            }

            .pending-claims-card {
              background-color: #145362;
              border-radius: 16px;
              padding: 24px;
              box-shadow: 0 4px 14px rgba(0, 0, 0, 0.08);
              color: #f9edd7;
            }

            .pending-label-row {
              position: relative;
              margin-bottom: 16px;
            }

            .pending-label {
              font-size: 14px;
              font-weight: 600;
              color: #f9edd7;
            }

            .refresh-float {
              position: absolute;
              right: -4px;
              top: 50%;
              transform: translateY(-50%);
            }

            .refresh-btn {
              background: transparent;
              border: none;
              display: inline-flex;
              align-items: center;
              font-size: 13px;
              font-weight: 500;
              color: #f9edd7;
              gap: 6px;
              cursor: pointer;
              padding: 0;
            }

            .refresh-btn svg {
              transition: transform 0.5s ease;
            }

            .refresh-btn.spin svg {
              transform: rotate(360deg);
            }

            .pending-amount {
              font-size: 28px;
              font-weight: 800;
              margin-bottom: 8px;
              color: #f9edd7;
            }

            .pending-updated {
              font-size: 12px;
              color: #f9edd7;
            }

            .pending-updated.update-animate {
              animation: fadeSlideIn 0.5s ease;
            }

            .clinic-dashboard-cards {
              display: flex;
              flex-direction: column;
              gap: 16px;
              margin-top: 24px;
              margin-bottom: 25px;
            }

            .clinic-dashboard-card {
              background: linear-gradient(to bottom, #f9edd7, #f2dfc5);
              border-radius: 16px;
              padding: 16px 18px;
              display: flex;
              justify-content: space-between;
              align-items: center;
              box-shadow:
                inset 0 1px 0 rgba(255, 255, 255, 0.6),
                0 6px 16px rgba(0, 0, 0, 0.08);
              transition: box-shadow 0.2s ease;
            }

            .card-left {
              display: flex;
              align-items: center;
              gap: 12px;
            }

            .card-icon {
              background-color: #145362;
              border-radius: 50%;
              width: 36px;
              height: 36px;
              display: flex;
              align-items: center;
              justify-content: center;
            }

            .card-icon svg {
              fill: #f9edd7;
            }

            .card-text .card-label {
              font-size: 13px;
              color: #333;
              margin-bottom: 4px;
            }

            .card-text .card-value {
              font-size: 18px;
              font-weight: 700;
              color: #111;
            }

            .card-chevron {
              font-size: 20px;
              color: #888;
            }

            body.page-clinic-dashboard::after {
              content: "";
              display: block;
              height: 100px;
            }

            .skeepy-dashboard-footer {
              text-align: center;
              font-size: 13px;
              color: #666;
              padding: 10px 0 30px;
            }

            .skeepy-dashboard-footer::after {
              content: "";
              display: block;
              height: 90px;
            }

            .clinic-toggle-wrapper {
              display: flex;
              align-items: center;
              cursor: pointer;
              background-color: transparent;
            }

            .clinic-profile-icon {
              margin-right: 8px;
            }

            .clinic-name-toggle {
              font-size: 16px;
              font-weight: 600;
              color: #145362;
            }

            .clinic-chevron {
              margin-left: 8px;
            }

            .clinic-message-icon {
              margin-left: auto;
              cursor: pointer;
            }

            .clinic-header-toggle-row {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin: 32px 0 20px;
              padding: 0 20px;
            }

            .toggle-left {
              display: flex;
              align-items: center;
              gap: 8px;
              cursor: pointer;
            }

            .profile-icon {
              width: 28px;
              height: 28px;
              border-radius: 50%;
              object-fit: cover;
            }

            .clinic-name {
              font-weight: 600;
              font-size: 16px;
              color: #145362;
            }

            .toggle-right {
              display: flex;
              align-items: center;
            }

            .support-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 99999;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
                padding: 20px;
            }
            
            .support-modal.active {
                opacity: 1;
                visibility: visible;
            }

            .support-modal-content {
              background-color: #fff;
              margin: 10% auto;
              padding: 20px;
              border-radius: 8px;
              width: 90%;
              max-width: 400px;
              position: relative;
            }

            .modal-close-btn {
              position: absolute;
              top: 10px;
              right: 14px;
              background: none;
              border: none;
              font-size: 24px;
              color: red;
              cursor: pointer;
            }



            .support-text {
              flex: 1;
            }

            .support-label {
              font-size: 12px;
              color: #6B7280;
              margin-bottom: 2px;
            }

            .support-value {
              font-size: 14px;
              font-weight: 500;
              color: #111827;
            }

            @keyframes fadeSlideIn {
              from {
                opacity: 0;
                transform: translateY(4px);
              }
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }

            @keyframes slideFadeIn {
              from {
                transform: translateY(20px);
                opacity: 0;
              }
              to {
                transform: translateY(0);
                opacity: 1;
              }
            }
        </style>

        <div class="dashboard-container">
            <main class="main-content">
                
                <!-- Dashboard Overview Section -->
                <div id="dashboard-overview" class="content-section active">
                    <!-- Greeting Section -->
                    <div class="greeting-section">
                        <h2><?php echo $greeting; ?>, <?php echo $first_name; ?>!</h2>
                        <p>You are in <?php echo esc_html($clinic_name); ?>'s Skeepy Dashboard</p>
                    </div>

                    <!-- Status Info Bar -->
                    <div class="status-info-bar">
                        <p>Clinic Status: <span style="font-weight: 600; color: <?php echo $clinic_status === 'approved' ? '#059669' : ($clinic_status === 'suspended' ? '#DC2626' : '#D97706'); ?>"><?php echo ucfirst($clinic_status); ?></span></p>
                        <p>Provider ID: <span style="font-weight: 600; color: #145362;"><?php echo htmlspecialchars($provider_id); ?></span></p>
                    </div>
                    
                    <!-- Balance Card -->
                    <div class="balance-card">
                        <div class="balance-top">
                            <div class="balance-label">Pending claims payment</div>
                            <button class="refresh-btn" onclick="refreshBalance()" id="refresh-btn">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                        <div class="balance-amount" id="balance-amount">₦0.00</div>
                        <div class="update-time" id="update-time">Updated just now</div>
                    </div>
                    
                    <!-- Stats Grid -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-top">
                                <div class="stat-icon payments">
                                    <i class="fas fa-money-bill-wave"></i>
                                </div>
                            </div>
                            <div class="stat-title">Total Payments Received</div>
                            <div class="stat-value" id="total-payments">₦0.00</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-top">
                                <div class="stat-icon claims">
                                    <i class="fas fa-check-circle"></i>
                                </div>
                            </div>
                            <div class="stat-title">Total Approved Claims</div>
                            <div class="stat-value" id="approved-claims">0</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-top">
                                <div class="stat-icon skeepers">
                                    <i class="fas fa-heart"></i>
                                </div>
                            </div>
                            <div class="stat-title">Total Skeepers Served</div>
                            <div class="stat-value" id="total-skeepers">0</div>
                        </div>
                    </div>
                    
                    <!-- Quick Actions -->
                    <div class="actions-section">
                        <h3 class="section-header">Quick Access</h3>
                        <div class="actions-list">
                            <button class="action-item" onclick="openVerificationModal()">
                                <i class="fas fa-search"></i>
                                <span>Verify HMO ID</span>
                            </button>
                            
                            <button class="action-item" onclick="showSubmitClaimSection();">
                                <i class="fas fa-file-medical"></i>
                                <span>Submit Claim</span>
                            </button>
                            
                            <button class="action-item" onclick="showServicesSection();">
                                <i class="fas fa-cogs"></i>
                                <span>Services</span>
                            </button>
                            
                            <button class="action-item" onclick="showProfileSection();">
                                <i class="fas fa-user"></i>
                                <span>Clinic Profile</span>
                            </button>
                            
                            <button class="action-item" onclick="showClaimsDashboardSection();">
                                <i class="fas fa-chart-line"></i>
                                <span>Claims Dashboard</span>
                            </button>
                            
                            <button class="action-item" onclick="openSupportModal()">
                                <i class="fas fa-headset"></i>
                                <span>Support</span>
                            </button>
                            
                            <button class="action-item" onclick="openSignOutModal()">
                                <i class="fas fa-sign-out-alt"></i>
                                <span>Sign Out</span>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Clinic Profile Section -->
                <div id="clinic-profile" class="content-section">
                    <button class="back-button" onclick="showDashboardOverview();">
                        <i class="fas fa-arrow-left"></i>
                        Back to Dashboard
                    </button>
                    
                    <div class="section-header-main">
                        <h2>Clinic Profile</h2>
                        <p>Complete information from your registration</p>
                    </div>
                    
                    <div class="info-grid">
                        <?php if ($clinic_status !== 'unregistered'): ?>
                            <div class="info-card">
                                <h3><i class="fas fa-hospital"></i> Clinic Information</h3>
                                <div class="info-item">
                                    <span class="info-label">Clinic Name:</span>
                                    <span class="info-value"><?php echo esc_html($clinic_name); ?></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Provider ID:</span>
                                    <span class="info-value"><?php echo esc_html($provider_id); ?></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Email:</span>
                                    <span class="info-value"><?php echo esc_html($clinic_email); ?></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Phone:</span>
                                    <span class="info-value"><?php echo esc_html($clinic_phone); ?></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Address:</span>
                                    <span class="info-value"><?php echo esc_html($clinic_address); ?></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">VCN Number:</span>
                                    <span class="info-value"><?php echo esc_html($vcn_number); ?></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Status:</span>
                                    <span class="info-value" style="color: <?php echo $clinic_status === 'approved' ? '#059669' : ($clinic_status === 'suspended' ? '#DC2626' : '#D97706'); ?>; font-weight: 600;"><?php echo ucfirst($clinic_status); ?></span>
                                </div>
                            </div>
                            
                            <div class="info-card">
                                <h3><i class="fas fa-user-md"></i> Representative Information</h3>
                                <div class="info-item">
                                    <span class="info-label">Full Name:</span>
                                    <span class="info-value"><?php echo esc_html($first_name . ' ' . $rep_last_name); ?></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Job Title:</span>
                                    <span class="info-value"><?php echo esc_html($job_title); ?></span>
                                </div>
                            </div>
                        <?php else: ?>
                            <div class="empty-state">
                                <i class="fas fa-hospital"></i>
                                <h3>No Clinic Profile Found</h3>
                                <p>Please complete your clinic registration to view your profile information.</p>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <!-- Services Section -->
                <div id="services-section" class="content-section">
                    <button class="back-button" onclick="showDashboardOverview();">
                        <i class="fas fa-arrow-left"></i>
                        Back to Dashboard
                    </button>
                    
                    <div class="section-header-main">
                        <h2>Services & Pricing</h2>
                        <p>Your registered services with Skeepy discounts</p>
                    </div>
                    
                    <div class="services-grid">
                        <?php if ($services_offered && $clinic_status !== 'unregistered'): ?>
                            <?php
                            // Function to map old service names to new ones
                            function mapOldServiceNames($service_name) {
                                $mapping = array('Tumor Removal' => 'Mass Removal', 'Wound Care' => 'Wound Repair', 'Treatment of dental diseases' => '', 'Ophthalmic & Orthopedic Procedure' => 'Ophthalmic Procedure', 'Urinary Bladder Procedure' => '');
                                return isset($mapping[$service_name]) ? $mapping[$service_name] : $service_name;
                            }
                            
                            // Parse services from database - they're stored as JSON array
                            if (strpos($services_offered, '[{') === 0) {
                                // JSON format from database
                                $services_data = json_decode($services_offered, true);
                                
                                if ($services_data && is_array($services_data)) {
                                    foreach ($services_data as $service_data):
                                        if (isset($service_data['service']) && isset($service_data['original_fee'])):
                                            $service_name = mapOldServiceNames($service_data['service']);
                                            if (empty($service_name)) continue;
                                            $original_fee = floatval($service_data['original_fee']);
                                            
                                            // Updated discount rates with exact service specifications
                                            if (stripos($service_name, 'General Consultation') !== false || 
                                                stripos($service_name, 'Basic Grooming') !== false || 
                                                stripos($service_name, 'Premium Grooming') !== false || 
                                                stripos($service_name, 'Dental Cleaning') !== false || 
                                                stripos($service_name, 'Comprehensive Physical Exam') !== false || 
                                                stripos($service_name, 'Basic Blood Work') !== false || 
                                                stripos($service_name, 'Wound Repair') !== false || 
                                                stripos($service_name, 'Tail Removal') !== false || 
                                                stripos($service_name, 'Other Surgeries') !== false || 
                                                stripos($service_name, 'Pet Boarding') !== false || 
                                                stripos($service_name, 'Emergency Boarding Support') !== false || 
                                                stripos($service_name, 'Pet Sitting') !== false) {
                                                $discount_rate = 15;
                                            } elseif (stripos($service_name, 'Routine Medication') !== false || 
                                                     stripos($service_name, 'Chronic Disease Medication') !== false || 
                                                     stripos($service_name, 'Supplements Prescribed') !== false) {
                                                $discount_rate = 0;
                                            } else {
                                                $discount_rate = 10;
                                            }
                                            
                                            // Calculate discounted fee
                                            $discount_amount = $original_fee * ($discount_rate / 100);
                                            $discounted_fee = $original_fee - $discount_amount;
                            ?>
                                <div class="service-item">
                                    <div class="service-name"><?php echo esc_html($service_name); ?></div>
                                    <div class="service-pricing">
                                        <span class="original-fee">₦<?php echo number_format($original_fee); ?></span>
                                        <span class="discounted-fee">₦<?php echo number_format($discounted_fee); ?></span>
                                        <span class="discount-badge"><?php echo $discount_rate; ?>% Discount</span>
                                    </div>
                                </div>
                            <?php 
                                        endif;
                                    endforeach;
                                }
                            } else {
                                // Fallback for simple comma-separated format
                                $services_array = explode(',', $services_offered);
                                $services_array = array_map('trim', $services_array);
                                $services_array = array_filter($services_array);
                                
                                foreach ($services_array as $service_line):
                                    $service_line = trim($service_line);
                                    if ($service_line):
                                        if (strpos($service_line, ':') !== false && strpos($service_line, '₦') !== false) {
                                            $parts = explode(':', $service_line, 2);
                                            $service_name = mapOldServiceNames(trim($parts[0]));
                                            if (empty($service_name)) continue;
                                            $fee_part = trim($parts[1]);
                                            
                                            // Extract fee amount
                                            if (preg_match('/₦?(d+)/', $fee_part, $matches)) {
                                                $original_fee = floatval($matches[1]);
                                            } else {
                                                $original_fee = 5000;
                                            }
                                        } else {
                                            $service_name = mapOldServiceNames($service_line);
                                            if (empty($service_name)) continue;
                                            $original_fee = 5000;
                                        }
                                        
                                        // Updated discount rates with exact service specifications  
                                        if (stripos($service_name, 'General Consultation') !== false || 
                                            stripos($service_name, 'Basic Grooming') !== false || 
                                            stripos($service_name, 'Premium Grooming') !== false || 
                                            stripos($service_name, 'Dental Cleaning') !== false || 
                                            stripos($service_name, 'Comprehensive Physical Exam') !== false || 
                                            stripos($service_name, 'Basic Blood Work') !== false || 
                                            stripos($service_name, 'Wound Repair') !== false || 
                                            stripos($service_name, 'Tail Removal') !== false || 
                                            stripos($service_name, 'Other Surgeries') !== false || 
                                            stripos($service_name, 'Pet Boarding') !== false || 
                                            stripos($service_name, 'Emergency Boarding Support') !== false || 
                                            stripos($service_name, 'Pet Sitting') !== false) {
                                            $discount_rate = 15;
                                        } elseif (stripos($service_name, 'Routine Medication') !== false || 
                                                 stripos($service_name, 'Chronic Disease Medication') !== false || 
                                                 stripos($service_name, 'Supplements Prescribed') !== false) {
                                            $discount_rate = 0;
                                        } else {
                                            $discount_rate = 10;
                                        }
                                        
                                        // Calculate discounted fee
                                        $discount_amount = $original_fee * ($discount_rate / 100);
                                        $discounted_fee = $original_fee - $discount_amount;
                            ?>
                                <div class="service-item">
                                    <div class="service-name"><?php echo esc_html($service_name); ?></div>
                                    <div class="service-pricing">
                                        <span class="original-fee">₦<?php echo number_format($original_fee); ?></span>
                                        <span class="discounted-fee">₦<?php echo number_format($discounted_fee); ?></span>
                                        <span class="discount-badge"><?php echo $discount_rate; ?>% Discount</span>
                                    </div>
                                </div>
                            <?php 
                                    endif;
                                endforeach;
                            } 
                            ?>
                        <?php else: ?>
                            <div class="empty-state">
                                <i class="fas fa-cogs"></i>
                                <h3>No Services Registered</h3>
                                <p>Please contact support to update your available services.</p>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <!-- Submit Claim Section -->
                <div id="submit-claim-section" class="content-section">
                    <button class="back-button" onclick="showDashboardOverview();">
                        <i class="fas fa-arrow-left"></i>
                        Back to Dashboard
                    </button>
                    
                    <div class="section-header-main">
                        <h2>Submit Claim</h2>
                        <p>Submit a claim for reimbursement</p>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <?php echo do_shortcode('[skeepy_claims_form]'); ?>
                    </div>
                </div>

                <!-- Patient Information Section -->
                <div id="patient-info-section" class="content-section">
                    <button class="back-button" onclick="showDashboardOverview();">
                        <i class="fas fa-arrow-left"></i>
                        Back to Dashboard
                    </button>
                    
                    <div class="section-header-main">
                        <h2>Patient Information</h2>
                        <p>Verified HMO ID details</p>
                    </div>
                    
                    <div id="patient-details-content" class="info-grid">
                        <!-- Patient details will be populated here -->
                    </div>
                </div>

                <!-- Claims Dashboard Section -->
                <div id="claims-dashboard-section" class="content-section">
                    <button class="back-button" onclick="showDashboardOverview();">
                        <i class="fas fa-arrow-left"></i>
                        Back to Dashboard
                    </button>
                    
                    <div class="section-header-main">
                        <h2>Claims Dashboard</h2>
                        <p>View and manage your claims history</p>
                    </div>
                    
                    <!-- Claims Filters -->
                    <div class="claims-filters">
                        <div class="filter-row">
                            <div class="filter-group">
                                <label>Filter by Date:</label>
                                <select id="date-filter" class="filter-input">
                                    <option value="">All Time</option>
                                    <option value="week">This Week</option>
                                    <option value="month">This Month</option>
                                    <option value="custom">Custom Range</option>
                                </select>
                            </div>
                            <div class="filter-group" id="custom-date-range" style="display: none;">
                                <label>From:</label>
                                <input type="date" id="date-from" class="filter-input">
                                <label>To:</label>
                                <input type="date" id="date-to" class="filter-input">
                            </div>
                            <div class="filter-group">
                                <label>Filter by Status:</label>
                                <select id="status-filter" class="filter-input">
                                    <option value="">All Status</option>
                                    <option value="pending">Pending</option>
                                    <option value="approved">Approved</option>
                                    <option value="rejected">Rejected</option>
                                    <option value="paid">Paid</option>
                                </select>
                            </div>
                            <button class="filter-btn" onclick="applyClaimsFilters();">
                                <i class="fas fa-filter"></i>
                                Apply Filters
                            </button>
                        </div>
                    </div>
                    
                    <!-- Claims Table Container - Will be replaced by AJAX -->
                    <div class="claims-table-container" id="claims-table-container">
                        <!-- Claims data will be populated here via AJAX -->
                    </div>
                    
                    <!-- Recent Claims section will be populated by AJAX separately -->
                    <!-- Pagination and Recent Claims are now handled server-side -->
                </div>
            </main>
        </div>
        
        <!-- HMO Verification Modal -->
        <div class="verification-modal" id="verification-modal">
            <div class="modal-dialog">
                <div class="modal-header">
                    <h3 class="modal-title">Verify HMO ID</h3>
                    <button class="modal-close" onclick="closeVerificationModal()" style="color: red;">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="modal-body">
                    <div class="search-form">
                        <input type="text" class="form-input" id="hmo-input" placeholder="Enter HMO ID (e.g., SKEEPYHMO-ABC123)" maxlength="20">
                        <button class="save-btn show" onclick="verifyHMOModal()" style="display: block; margin-top: 16px;">
                            <span id="search-text">Search</span>
                        </button>
                    </div>
                    
                    <div id="verification-result"></div>
                </div>
            </div>
        </div>
        
        <!-- Support Modal -->
        <div class="support-modal" id="support-modal">
            <div class="modal-dialog">
                <div class="modal-header">
                    <h3 class="modal-title">Contact Support</h3>
                    <button class="modal-close" onclick="closeSupportModal()" style="color: red;">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="modal-body">
                    <a href="javascript:void(0)" onclick="window.open('tel:02013306472', '_self')" class="support-item">
                        <i class="fas fa-phone"></i>
                        <div class="support-text">
                            <div class="support-label">Call</div>
                            <div class="support-value">02013306472</div>
                        </div>
                    </a>
                    
                    <a href="javascript:void(0)" onclick="window.open('mailto:help@skeepy.co', '_self')" class="support-item">
                        <i class="fas fa-envelope"></i>
                        <div class="support-text">
                            <div class="support-label">Email</div>
                            <div class="support-value">help@skeepy.co</div>
                        </div>
                    </a>
                    
                    <a href="javascript:void(0)" onclick="window.open('https://wa.me/2349032810410', '_blank')" class="support-item">
                        <i class="fab fa-whatsapp"></i>
                        <div class="support-text">
                            <div class="support-label">WhatsApp</div>
                            <div class="support-value">09032810410</div>
                        </div>
                    </a>
                </div>
            </div>
        </div>

        <!-- Sign Out Modal -->
        <div class="support-modal" id="signout-modal">
            <div class="modal-dialog">
                <div class="modal-header">
                    <h3 class="modal-title">Want to sign out?</h3>
                    <button class="modal-close" onclick="closeSignOutModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="modal-body">
                    <div style="display: flex; gap: 12px; justify-content: center; margin-top: 20px;">
                        <button onclick="closeSignOutModal()" style="padding: 12px 24px; background: #F3F4F6; color: #374151; border: none; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.2s ease; min-width: 80px;">
                            No
                        </button>
                        <button id="confirm-signout-btn" onclick="confirmSignOut()" style="padding: 12px 24px; background: #DC2626; color: white; border: none; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.2s ease; min-width: 80px;">
                            Yes
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let balance = 0;
            let totalPayments = 0;
            let totalClaims = 0;
            let totalSkeepers = 0;
            let lastUpdateTime = new Date();
            
            // Clinic data from PHP
            const clinicData = {
                clinicName: '<?php echo addslashes($clinic_name); ?>',
                providerID: '<?php echo addslashes($provider_id); ?>',
                clinicEmail: '<?php echo addslashes($clinic_email); ?>',
                clinicPhone: '<?php echo addslashes($clinic_phone); ?>',
                clinicAddress: '<?php echo addslashes($clinic_address); ?>',
                repFirstName: '<?php echo addslashes($first_name); ?>',
                repLastName: '<?php echo addslashes($rep_last_name); ?>',
                jobTitle: '<?php echo addslashes($job_title); ?>',
                vcnNumber: '<?php echo addslashes($vcn_number); ?>',
                servicesOffered: '<?php echo addslashes($services_offered); ?>',
                clinicStatus: '<?php echo addslashes($clinic_status); ?>'
            };

            // Section switching functions
            function showDashboardOverview() {
                hideAllSections();
                document.getElementById('dashboard-overview').classList.add('active');
            }

            function showProfileSection() {
                hideAllSections();
                document.getElementById('clinic-profile').classList.add('active');
            }

            function showServicesSection() {
                hideAllSections();
                document.getElementById('services-section').classList.add('active');
            }

            function showSubmitClaimSection() {
                hideAllSections();
                document.getElementById('submit-claim-section').classList.add('active');
            }

            function showPatientInfoSection() {
                hideAllSections();
                document.getElementById('patient-info-section').classList.add('active');
            }

            function showClaimsDashboardSection() {
                hideAllSections();
                document.getElementById('claims-dashboard-section').classList.add('active');
                loadClaimsData();
            }

            // Date filter handler (will be initialized in main DOMContentLoaded)
            function setupDateFilter() {
                const dateFilter = document.getElementById('date-filter');
                const customDateRange = document.getElementById('custom-date-range');
                
                if (dateFilter) {
                    dateFilter.addEventListener('change', function() {
                        if (this.value === 'custom') {
                            customDateRange.style.display = 'block';
                        } else {
                            customDateRange.style.display = 'none';
                        }
                    });
                }
            }

            function hideAllSections() {
                const sections = document.querySelectorAll('.content-section');
                sections.forEach(section => section.classList.remove('active'));
            }

            // Claims Dashboard Variables
            let currentPage = 1;
            let itemsPerPage = 10;
            let filteredClaims = [];
            let allClaims = [];

            // Load claims data from database using admin interface logic
            function loadClaimsData() {
                console.log('Loading claims data...');
                
                // Make AJAX call using same structure as admin interface
                const formData = new FormData();
                formData.append('action', 'skeepy_get_clinic_claims');
                formData.append('nonce', '<?php echo wp_create_nonce("clinic_dashboard_nonce"); ?>');

                fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    console.log('Claims response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Claims response data:', data);
                    console.log('Response structure:', JSON.stringify(data, null, 2));
                    
                    if (data.success) {
                        // Check multiple possible data structures
                        let html = '';
                        if (data.data && data.data.html) {
                            html = data.data.html;
                        } else if (data.html) {
                            html = data.html;
                        } else if (data.data) {
                            html = data.data;
                        }
                        
                        console.log('HTML content:', html);
                        
                        if (html) {
                            // Find the correct claims table container
                            let targetContainer = document.querySelector('.claims-table-container') || 
                                                document.getElementById('claims-table-container') ||
                                                document.querySelector('#claims-dashboard-section .claims-table-container');
                            
                            if (targetContainer) {
                                targetContainer.innerHTML = html;
                                console.log('Successfully displayed claims HTML content in container');
                            } else {
                                console.log('Could not find claims-table-container, trying alternative locations');
                                // Try to find the claims dashboard section and insert the HTML
                                const dashboardSection = document.getElementById('claims-dashboard-section');
                                if (dashboardSection) {
                                    // Look for any existing container within the section
                                    let existingContainer = dashboardSection.querySelector('.claims-table-container');
                                    if (existingContainer) {
                                        existingContainer.innerHTML = html;
                                        console.log('Found and populated existing container in dashboard section');
                                    } else {
                                        // Insert the HTML after the filters section
                                        const filtersSection = dashboardSection.querySelector('.claims-filters');
                                        if (filtersSection) {
                                            filtersSection.insertAdjacentHTML('afterend', html);
                                            console.log('Inserted claims HTML after filters section');
                                        } else {
                                            console.log('No suitable location found for claims data');
                                        }
                                    }
                                }
                            }
                        } else {
                            console.log('No HTML content found in response');
                            if (claimsContainer) {
                                claimsContainer.innerHTML = '<div class="no-claims-message"><h3>No Claims Found</h3><p>Response received but no HTML content.</p></div>';
                            }
                        }
                    } else {
                        console.error('Failed to load claims:', data);
                        if (claimsContainer) {
                            claimsContainer.innerHTML = '<div class="no-claims-message"><h3>Error Loading Claims</h3><p>Failed to retrieve claims data.</p></div>';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading claims:', error);
                    if (claimsContainer) {
                        claimsContainer.innerHTML = '<div class="no-claims-message"><h3>Error</h3><p>Failed to load claims data.</p></div>';
                    }
                });
            }

            // Apply filters to claims - enhanced to work with AJAX data
            function applyClaimsFilters() {
                const dateFilter = document.getElementById('date-filter').value;
                const statusFilter = document.getElementById('status-filter').value;
                const dateFrom = document.getElementById('date-from').value;
                const dateTo = document.getElementById('date-to').value;

                console.log('Applying filters:', { dateFilter, statusFilter, dateFrom, dateTo });
                
                // Send filter parameters to server for processing
                const formData = new FormData();
                formData.append('action', 'skeepy_get_clinic_claims');
                formData.append('nonce', '<?php echo wp_create_nonce("clinic_dashboard_nonce"); ?>');
                formData.append('date_filter', dateFilter);
                formData.append('status_filter', statusFilter);
                formData.append('date_from', dateFrom);
                formData.append('date_to', dateTo);

                // Remove any loading animation - directly apply filters

                fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Filtered claims response:', data);
                    
                    if (data.success) {
                        let html = '';
                        if (data.data && data.data.html) {
                            html = data.data.html;
                        }
                        
                        if (html) {
                            let targetContainer = document.querySelector('.claims-table-container');
                            if (targetContainer) {
                                targetContainer.innerHTML = html;
                                console.log('Successfully applied filters and updated display');
                            }
                        }
                    } else {
                        console.error('Failed to apply filters:', data);
                        if (claimsContainer) {
                            claimsContainer.innerHTML = '<div class="no-claims-message"><h3>Error</h3><p>Failed to apply filters.</p></div>';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error applying filters:', error);
                    if (claimsContainer) {
                        claimsContainer.innerHTML = '<div class="no-claims-message"><h3>Error</h3><p>Failed to apply filters.</p></div>';
                    }
                });
            }

            // Update claims table display
            function updateClaimsDisplay() {
                const tableBody = document.getElementById('claims-table-body');
                const totalClaims = filteredClaims.length;
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage, totalClaims);
                const claimsToShow = filteredClaims.slice(startIndex, endIndex);

                if (claimsToShow.length === 0) {
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="4" style="text-align: center; padding: 40px; color: #6B7280;">
                                <i class="fas fa-file-medical" style="font-size: 24px; margin-bottom: 12px; display: block;"></i>
                                No claims found
                            </td>
                        </tr>
                    `;
                } else {
                    tableBody.innerHTML = claimsToShow.map(claim => `
                        <tr>
                            <td>${formatDate(claim.submission_date)}</td>
                            <td style="font-weight: 600; color: #145362;">${claim.claim_id}</td>
                            <td style="font-weight: 600;">${formatCurrency(claim.total_amount)}</td>
                            <td>
                                <span class="status-badge status-${claim.status}">
                                    ${claim.status}
                                </span>
                            </td>
                        </tr>
                    `).join('');
                }

                // Update pagination
                updatePagination(totalClaims, startIndex, endIndex);
            }

            // Update pagination controls
            function updatePagination(totalClaims, startIndex, endIndex) {
                document.getElementById('showing-start').textContent = totalClaims > 0 ? startIndex + 1 : 0;
                document.getElementById('showing-end').textContent = endIndex;
                document.getElementById('total-claims').textContent = totalClaims;
                document.getElementById('current-page').textContent = currentPage;

                const totalPages = Math.ceil(totalClaims / itemsPerPage);
                document.getElementById('prev-btn').disabled = currentPage <= 1;
                document.getElementById('next-btn').disabled = currentPage >= totalPages;
            }

            // Pagination functions
            function previousPage() {
                if (currentPage > 1) {
                    currentPage--;
                    updateClaimsDisplay();
                }
            }

            function nextPage() {
                const totalPages = Math.ceil(filteredClaims.length / itemsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    updateClaimsDisplay();
                }
            }

            // Update recent claims list
            function updateRecentClaims() {
                const recentClaimsList = document.getElementById('recent-claims-list');
                const recentClaims = allClaims.slice(0, 5); // Show 5 most recent

                if (recentClaims.length === 0) {
                    recentClaimsList.innerHTML = `
                        <div style="text-align: center; padding: 40px; color: #6B7280;">
                            <i class="fas fa-file-medical" style="font-size: 24px; margin-bottom: 12px; display: block;"></i>
                            No recent claims to display
                        </div>
                    `;
                } else {
                    recentClaimsList.innerHTML = recentClaims.map(claim => {
                        const submissionDate = new Date(claim.submission_date);
                        const dueDate = new Date(submissionDate.getTime() + 7 * 24 * 60 * 60 * 1000); // 7 days from submission
                        
                        return `
                            <div class="recent-claim-item">
                                <div class="recent-claim-header">
                                    <div class="recent-claim-id">ID: ${claim.claim_id}</div>
                                    <div class="recent-claim-status">
                                        <span class="status-badge status-${claim.status}">
                                            ${claim.status}
                                        </span>
                                    </div>
                                </div>
                                <div class="recent-claim-due">Due Date: ${formatDate(dueDate)}</div>
                            </div>
                        `;
                    }).join('');
                }
            }

            // Show empty state for claims
            function showEmptyClaimsState() {
                const tableBody = document.getElementById('claims-table-body');
                const recentClaimsList = document.getElementById('recent-claims-list');

                tableBody.innerHTML = `
                    <tr>
                        <td colspan="4" style="text-align: center; padding: 40px; color: #6B7280;">
                            <i class="fas fa-file-medical" style="font-size: 24px; margin-bottom: 12px; display: block;"></i>
                            No claims submitted yet
                        </td>
                    </tr>
                `;

                recentClaimsList.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #6B7280;">
                        <i class="fas fa-file-medical" style="font-size: 24px; margin-bottom: 12px; display: block;"></i>
                        No recent claims to display
                    </div>
                `;

                // Update pagination for empty state
                updatePagination(0, 0, 0);
            }

            // Format date for display
            function formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });
            }

            function formatCurrency(amount) {
                return new Intl.NumberFormat('en-NG', {
                    style: 'currency',
                    currency: 'NGN',
                    minimumFractionDigits: 2
                }).format(amount).replace('NGN', '₦');
            }

            function updateDisplay() {
                document.getElementById('balance-amount').textContent = formatCurrency(balance);
            }

            function updateLastRefreshTime() {
                const now = new Date();
                lastUpdateTime = now;
                document.getElementById('update-time').textContent = 'Updated just now';
            }

            function updateRelativeTime() {
                const now = new Date();
                const diffInSeconds = Math.floor((now - lastUpdateTime) / 1000);
                
                let timeText;
                if (diffInSeconds < 10) {
                    timeText = 'Updated just now';
                } else if (diffInSeconds < 60) {
                    timeText = `Updated ${diffInSeconds} secs ago`;
                } else if (diffInSeconds < 3600) {
                    const minutes = Math.floor(diffInSeconds / 60);
                    timeText = `Updated ${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;
                } else {
                    const hours = Math.floor(diffInSeconds / 3600);
                    timeText = `Updated ${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;
                }
                
                document.getElementById('update-time').textContent = timeText;
            }

            // Function to get fresh nonce for requests
            function getFreshNonce(action) {
                return new Promise((resolve, reject) => {
                    const formData = new FormData();
                    formData.append('action', 'skeepy_get_fresh_nonce');
                    formData.append('nonce_action', action);
                    
                    fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            resolve(data.data.nonce);
                        } else {
                            // Fallback to original nonce if fresh nonce fails
                            resolve('<?php echo wp_create_nonce("dashboard_stats_nonce"); ?>');
                        }
                    })
                    .catch(error => {
                        console.log('Fresh nonce request failed, using original');
                        resolve('<?php echo wp_create_nonce("dashboard_stats_nonce"); ?>');
                    });
                });
            }

            function loadDashboardStats() {
                console.log('Loading dashboard stats...');
                const formData = new FormData();
                formData.append('action', 'skeepy_get_dashboard_stats');
                formData.append('nonce', '<?php echo wp_create_nonce("dashboard_stats_nonce"); ?>');

                fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    console.log('Dashboard stats response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Dashboard stats data:', data);
                    if (data.success) {
                        // Update balance (pending claims)
                        balance = data.data.pending_claims;
                        document.getElementById('balance-amount').textContent = formatCurrency(balance);
                        
                        // Update stats
                        document.getElementById('total-payments').textContent = formatCurrency(data.data.total_payments);
                        document.getElementById('approved-claims').textContent = data.data.approved_claims;
                        document.getElementById('total-skeepers').textContent = data.data.total_skeepers;
                        
                        updateLastRefreshTime();
                    } else {
                        console.error('Dashboard stats failed:', data.data);
                        // Show error message to user
                        document.getElementById('balance-amount').textContent = '₦0.00';
                        document.getElementById('total-payments').textContent = '₦0.00';
                        document.getElementById('approved-claims').textContent = '0';
                        document.getElementById('total-skeepers').textContent = '0';
                    }
                })
                .catch(error => {
                    console.error('Error loading dashboard stats:', error);
                    // Show fallback values
                    document.getElementById('balance-amount').textContent = '₦0.00';
                    document.getElementById('total-payments').textContent = '₦0.00';
                    document.getElementById('approved-claims').textContent = '0';
                    document.getElementById('total-skeepers').textContent = '0';
                });
            }

            function refreshBalance() {
                const refreshBtn = document.getElementById('refresh-btn');
                refreshBtn.classList.add('rotating');
                
                // Load fresh dashboard stats
                loadDashboardStats();
                
                setTimeout(() => {
                    refreshBtn.classList.remove('rotating');
                }, 1000);
            }

            // Auto-refresh every 2 minutes (120000ms) if user is signed in
            function startAutoRefresh() {
                // Update relative time every 10 seconds
                setInterval(() => {
                    updateRelativeTime();
                }, 10000); // 10 seconds
                
                // Auto-refresh balance every 2 minutes
                setInterval(() => {
                    // Check if user is still signed in (basic check)
                    if (document.getElementById('balance-amount')) {
                        refreshBalance();
                    }
                }, 120000); // 2 minutes
            }

            function openVerificationModal() {
                document.getElementById('verification-modal').classList.add('active');
            }

            function closeVerificationModal() {
                document.getElementById('verification-modal').classList.remove('active');
                // Clear the form
                document.getElementById('hmo-input').value = '';
                document.getElementById('verification-result').innerHTML = '';
            }

            function openSupportModal() {
                document.getElementById('support-modal').classList.add('active');
            }

            function closeSupportModal() {
                document.getElementById('support-modal').classList.remove('active');
            }

            function openSignOutModal() {
                document.getElementById('signout-modal').classList.add('active');
            }

            function closeSignOutModal() {
                document.getElementById('signout-modal').classList.remove('active');
            }

            function confirmSignOut() {
                console.log('confirmSignOut called');
                
                // Close modal immediately
                closeSignOutModal();
                
                // Direct logout using AJAX then redirect
                fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        'action': 'skeepy_logout',
                        'nonce': '<?php echo wp_create_nonce("skeepy_logout_nonce"); ?>'
                    })
                })
                .then(() => {
                    // Redirect immediately after logout
                    window.location.href = '/clinic-signin';
                })
                .catch(() => {
                    // Fallback redirect
                    window.location.href = '/clinic-signin';
                });
            }



            function verifyHMOID() {
                // Try multiple possible selectors for Claims Form elements
                const claimsInput = document.getElementById('patient_hmo_id') || 
                                 document.querySelector('input[name*="hmo"]') || 
                                 document.querySelector('input[placeholder*="HMO"]') ||
                                 document.querySelector('input[placeholder*="SKEEPYHMO"]');
                                 
                const modalInput = document.getElementById('hmo-input');
                
                if (claimsInput && claimsInput.id !== 'hmo-input') {
                    // Claims form verification - Real AJAX verification
                    const hmoId = claimsInput.value.trim();
                    
                    // Try multiple possible selectors for verify button
                    const btn = document.getElementById('verify-hmo-btn') || 
                              document.querySelector('button[onclick*="verify"]') ||
                              document.querySelector('button[class*="verify"]') ||
                              document.querySelector('.verify-btn') ||
                              document.querySelector('[type="button"][value*="verify"]');
                    
                    // Try multiple possible selectors for result containers
                    const patientDiv = document.getElementById('patient-details-content');
                                     
                    const errorDiv = document.getElementById('hmo-error-message') ||
                                   document.querySelector('.error-message') ||
                                   document.querySelector('.hmo-error');
                    
                    console.log('Claims verification elements found:', {
                        input: claimsInput,
                        button: btn,
                        patientDiv: patientDiv,
                        errorDiv: errorDiv,
                        hmoValue: hmoId
                    });
                    
                    // Hide error message
                    if (errorDiv) errorDiv.style.display = 'none';
                    
                    if (!hmoId) {
                        const message = 'Please enter an HMO ID';
                        if (errorDiv) {
                            errorDiv.textContent = message;
                            errorDiv.style.display = 'block';
                        } else {
                            alert(message);
                        }
                        return;
                    }
                    
                    if (btn) {
                        btn.textContent = 'Verifying...';
                        btn.disabled = true;
                    }
                    
                    // Construct complete HMO ID if only 6 characters entered
                    let completeHMOId = hmoId;
                    if (hmoId.length === 6 && !hmoId.startsWith('SKEEPYHMO-')) {
                        completeHMOId = 'SKEEPYHMO-' + hmoId;
                    }
                    
                    console.log('Verifying HMO ID:', completeHMOId);
                    
                    // AJAX call to verify HMO ID from actual database
                    const formData = new FormData();
                    formData.append('action', 'skeepy_clinic_verify_patient');
                    formData.append('hmo_id', completeHMOId);
                    formData.append('_wpnonce', '<?php echo wp_create_nonce("verify_patient_nonce"); ?>');
                    
                    fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Verification response:', data);
                        
                        if (btn) {
                            btn.textContent = 'Verify Patient';
                            btn.disabled = false;
                        }
                        
                        if (data.success) {
                            window.verifiedHMOData = data.data;
                            console.log('Dashboard HMO Verification successful, setting verifiedHMOData:', window.verifiedHMOData);
                            
                            // Create benefit usage display HTML - ALWAYS show Usage section
                            let benefitUsageHtml = `
                                <div style="margin-top: 12px; padding-top: 12px; border-top: 1px solid #d1fae5;">
                                    <h5 style="color: #145362; margin-bottom: 8px; font-size: 14px;">Usage:</h5>
                                    <div style="font-size: 12px;">
                            `;
                            
                            if (data.data.service_usage && Object.keys(data.data.service_usage).length > 0) {
                                Object.keys(data.data.service_usage).forEach(service => {
                                    const usage = data.data.service_usage[service];
                                    benefitUsageHtml += `
                                        <div style="margin-bottom: 4px;">
                                            <span style="color: #374151;">${service}:</span> 
                                            <span style="color: #dc3545;">Used ${usage.count_used} times (−₦${usage.amount_used.toLocaleString()})</span>
                                        </div>
                                    `;
                                });
                                
                                if (data.data.total_coverage_used && data.data.total_coverage_limit) {
                                    const remainingCoverage = data.data.total_coverage_limit - data.data.total_coverage_used;
                                    benefitUsageHtml += `
                                        <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #f3f4f6;">
                                            <div><strong>Total Used:</strong> <span style="color: #dc3545;">−₦${data.data.total_coverage_used.toLocaleString()}</span></div>
                                            <div><strong>Remaining:</strong> <span style="color: #16a34a;">₦${remainingCoverage.toLocaleString()}</span></div>
                                        </div>
                                    `;
                                }
                            } else {
                                benefitUsageHtml += `
                                    <div style="color: #6B7280; font-style: italic;">No benefit usage yet</div>
                                `;
                            }
                            
                            benefitUsageHtml += `
                                    </div>
                                </div>
                            `;

                            // Create full patient info display with proper card structure
                            const resultHtml = `
                                <div class="info-card">
                                    <h3><i class="fas fa-paw"></i> Pet Information</h3>
                                    <div class="info-grid">
                                        <div><strong>Pet Name:</strong> ${data.data.pet_name}</div>
                                        <div><strong>HMO ID:</strong> ${data.data.hmo_id}</div>
                                        <div><strong>Pet Type:</strong> ${data.data.pet_type}</div>
                                        <div><strong>Pet Breed:</strong> ${data.data.pet_breed}</div>
                                        <div><strong>Pet Gender:</strong> ${data.data.pet_gender}</div>
                                        <div><strong>Pet Color:</strong> ${data.data.pet_color}</div>
                                        <div><strong>Pet Age:</strong> ${data.data.pet_age} Years Old</div>
                                        <div><strong>Pet Birthday:</strong> ${data.data.pet_birthday || 'Not provided'}</div>
                                    </div>
                                </div>
                                
                                <div class="info-card">
                                    <h3><i class="fas fa-shield-alt"></i> Plan Information</h3>
                                    <div class="info-grid">
                                        <div><strong>Plan Type:</strong> ${data.data.plan_type}</div>
                                        <div><strong>Plan Duration:</strong> ${data.data.plan_duration}</div>
                                        <div><strong>Plan Status:</strong> ${data.data.plan_status}</div>
                                        <div><strong>Plan Expiry:</strong> ${data.data.expiry_date}</div>
                                        <div><strong>Activation Date:</strong> ${data.data.activation_date}</div>
                                    </div>
                                </div>
                                
                                <div class="info-card">
                                    <h3><i class="fas fa-user"></i> Guardian Information</h3>
                                    <div class="info-grid">
                                        <div><strong>Guardian Name:</strong> ${data.data.guardian_name}</div>
                                        <div><strong>Phone:</strong> ${data.data.guardian_phone}</div>
                                        <div><strong>Email:</strong> ${data.data.guardian_email}</div>
                                        <div><strong>Address:</strong> ${data.data.guardian_address}</div>
                                    </div>
                                </div>
                                
                                <div class="info-card">
                                    <h3><i class="fas fa-chart-line"></i> Usage</h3>
                                    <div class="coverage-benefits">
                                        ${Object.keys(data.data.service_usage || {}).length > 0
                                            ? Object.entries(data.data.service_usage).map(([service, usage]) => `
                                                <div class="benefit-item">
                                                    <span class="benefit-name">${service}</span>
                                                    <span class="benefit-coverage">Used ${usage.count_used} times</span>
                                                    <span class="benefit-status">−₦${usage.amount_used.toLocaleString()}</span>
                                                </div>
                                            `).join('')
                                            : `<div class="benefit-item benefit-waiting">
                                                 <span>No benefit usage yet</span>
                                               </div>`
                                        }
                                    </div>
                                </div>
                            `;
                            
                            // Inject into the real container
                            if (patientDiv) {
                                patientDiv.innerHTML = resultHtml;
                                
                                // Actually switch to that panel
                                showPatientInfoSection();
                            } else {
                                // Create new result div after the input
                                let newResultDiv = document.getElementById('claims-verification-result');
                                if (!newResultDiv) {
                                    newResultDiv = document.createElement('div');
                                    newResultDiv.id = 'claims-verification-result';
                                    claimsInput.parentNode.insertBefore(newResultDiv, claimsInput.nextSibling);
                                }
                                newResultDiv.innerHTML = resultHtml;
                            }
                            
                            if (errorDiv) errorDiv.style.display = 'none';
                        } else {
                            window.verifiedHMOData = null;
                            const errorMessage = data.data || 'HMO ID does not exist.';
                            
                            if (errorDiv) {
                                errorDiv.textContent = errorMessage;
                                errorDiv.style.display = 'block';
                            } else {
                                // Create new error div after the input
                                let newErrorDiv = document.getElementById('claims-verification-error');
                                if (!newErrorDiv) {
                                    newErrorDiv = document.createElement('div');
                                    newErrorDiv.id = 'claims-verification-error';
                                    newErrorDiv.style.cssText = 'background: #FEE2E2; border: 1px solid #DC2626; border-radius: 8px; padding: 16px; margin-top: 16px; color: #DC2626; font-size: 14px;';
                                    claimsInput.parentNode.insertBefore(newErrorDiv, claimsInput.nextSibling);
                                }
                                newErrorDiv.textContent = '⚠ ' + errorMessage;
                                newErrorDiv.style.display = 'block';
                            }
                            
                            if (patientDiv) patientDiv.style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error('Verification error:', error);
                        
                        if (btn) {
                            btn.textContent = 'Verify Patient';
                            btn.disabled = false;
                        }
                        
                        const errorMessage = 'Verification failed. Please try again.';
                        if (errorDiv) {
                            errorDiv.textContent = errorMessage;
                            errorDiv.style.display = 'block';
                        } else {
                            alert(errorMessage);
                        }
                    });
                    
                } else if (modalInput) {
                    // Dashboard modal verification
                    verifyHMOModal();
                } else {
                    console.log('No HMO input found');
                    alert('HMO input field not found');
                }
            }
            
            // Make function globally accessible
            window.verifyHMOID = verifyHMOID;

            function verifyHMOModal() {
                const hmoInput = document.getElementById('hmo-input').value.trim();
                
                if (!hmoInput) {
                    alert('Please enter an HMO ID');
                    return;
                }
                
                // If user entered only 6 characters, add the SKEEPYHMO- prefix
                let fullHmoId = hmoInput;
                if (hmoInput.length === 6 && !hmoInput.includes('SKEEPYHMO-')) {
                    fullHmoId = 'SKEEPYHMO-' + hmoInput;
                }
                
                const searchBtn = document.getElementById('search-text');
                const resultDiv = document.getElementById('verification-result');
                
                searchBtn.textContent = 'Verifying...';
                
                const formData = new FormData();
                formData.append('action', 'skeepy_clinic_verify_patient');
                formData.append('hmo_id', fullHmoId);
                formData.append('_wpnonce', '<?php echo wp_create_nonce("verify_patient_nonce"); ?>');
                
                fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const patient = data.data;
                        showPatientDetails(patient);
                        closeVerificationModal();
                    } else {
                        resultDiv.innerHTML = `<div style="color: #DC2626; margin-top: 16px; padding: 12px; background: #FEE2E2; border-radius: 8px; font-size: 14px;"><i class="fas fa-exclamation-triangle"></i> ${data.data}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    resultDiv.innerHTML = '<div style="color: #DC2626; margin-top: 16px; padding: 12px; background: #FEE2E2; border-radius: 8px; font-size: 14px;"><i class="fas fa-exclamation-triangle"></i> Connection error. Please try again.</div>';
                })
                .finally(() => {
                    searchBtn.textContent = 'Search';
                });
            }

            function showPatientDetails(patient) {
                const contentDiv = document.getElementById('patient-details-content');
                
                contentDiv.innerHTML = `
                    <div class="info-card">
                        <h3><i class="fas fa-paw"></i> Pet Information</h3>
                        <div class="info-item">
                            <span class="info-label">Pet Name</span>
                            <span class="info-value">${patient.pet_name}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">HMO ID</span>
                            <span class="info-value">${patient.hmo_id}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Pet Type</span>
                            <span class="info-value">${patient.pet_type}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Pet Breed</span>
                            <span class="info-value">${patient.pet_breed}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Pet Gender</span>
                            <span class="info-value">${patient.pet_gender}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Pet Age</span>
                            <span class="info-value">${patient.pet_age} Years Old</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Pet Birthday</span>
                            <span class="info-value">${patient.pet_birthday || 'Not provided'}</span>
                        </div>
                    </div>
                    
                    <div class="info-card">
                        <h3><i class="fas fa-shield-alt"></i> Plan Information</h3>
                        <div class="info-item">
                            <span class="info-label">Plan Type</span>
                            <span class="info-value">${patient.plan_type.charAt(0).toUpperCase() + patient.plan_type.slice(1)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Plan Duration</span>
                            <span class="info-value">${patient.plan_duration}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Plan Status</span>
                            <span class="info-value" style="color: #10B981; font-weight: 600;">Active</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Plan Start Date</span>
                            <span class="info-value">${patient.activation_date ? new Date(patient.activation_date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) : 'Not activated yet'}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Expiry Date</span>
                            <span class="info-value">${patient.expiry_date || 'Not available'}</span>
                        </div>
                    </div>
                    
                    <div class="info-card">
                        <h3><i class="fas fa-user"></i> Guardian Information</h3>
                        <div class="info-item">
                            <span class="info-label">Guardian Name</span>
                            <span class="info-value">${patient.guardian_name}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Phone</span>
                            <span class="info-value">${patient.guardian_phone}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Email</span>
                            <span class="info-value">${patient.guardian_email}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Address</span>
                            <span class="info-value">${patient.guardian_address}</span>
                        </div>
                    </div>
                    
                    <div class="info-card">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                            <h3 style="margin: 0;"><i class="fas fa-umbrella"></i> Coverage</h3>
                            <h3 style="margin: 0; color: #6B7280; font-size: 16px;">Availability</h3>
                        </div>
                        ${generateRealCoverageInfo(patient)}
                        

                    </div>
                `;
                
                showPatientInfoSection();
            }

            // Update greeting based on user's local timezone
            function updateGreeting() {
                const now = new Date();
                const hour = now.getHours();
                let greeting;
                
                if (hour >= 0 && hour < 12) {
                    greeting = 'Good Morning';
                } else if (hour >= 12 && hour < 17) {
                    greeting = 'Good Afternoon';
                } else {
                    greeting = 'Good Evening';
                }
                
                const greetingElement = document.querySelector('.greeting-section h2');
                if (greetingElement) {
                    const currentText = greetingElement.textContent;
                    const name = currentText.replace(/^(Good Morning|Good Afternoon|Good Evening),?\s*/, '');
                    greetingElement.textContent = greeting + ', ' + name;
                }
            }
            
            // Update greeting on page load
            updateGreeting();

            // Fix Claims Form verification to use working dashboard method
            function fixClaimsFormVerification() {
                // Wait for Claims Form to load
                setTimeout(function() {
                    console.log('Fixing Claims Form verification...');
                    
                    // Find and override any verify buttons in Claims Form
                    const claimsSection = document.getElementById('submit-claim-section');
                    if (claimsSection) {
                        // Find all buttons that might be verify buttons
                        const allButtons = claimsSection.querySelectorAll('button, input[type="button"], input[type="submit"]');
                        console.log('Found buttons in Claims section:', allButtons);
                        
                        allButtons.forEach(function(btn) {
                            const text = (btn.textContent || btn.value || '').toLowerCase();
                            const onclick = btn.getAttribute('onclick') || '';
                            
                            // If this looks like a verify button
                            if (text.includes('verify') || onclick.includes('verify') || onclick.includes('patient')) {
                                console.log('Found verify button:', btn, 'with text:', text, 'onclick:', onclick);
                                
                                // Remove existing onclick
                                btn.removeAttribute('onclick');
                                
                                // Add new click handler
                                btn.addEventListener('click', function(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    console.log('Verify button clicked, running verification...');
                                    
                                    // Run the working verification
                                    const hmoInput = document.getElementById('patient_hmo_id') || 
                                                   document.querySelector('input[name*="hmo"]') || 
                                                   document.querySelector('input[placeholder*="HMO"]');
                                    
                                    if (hmoInput) {
                                        const hmoId = hmoInput.value.trim();
                                        if (!hmoId) {
                                            alert('Please enter a Pet HMO ID');
                                            return;
                                        }
                                        
                                        // Add prefix if needed
                                        let fullHmoId = hmoId;
                                        if (hmoId.length === 6 && !hmoId.includes('SKEEPYHMO-')) {
                                            fullHmoId = 'SKEEPYHMO-' + hmoId;
                                        }
                                        
                                        console.log('Verifying HMO ID:', fullHmoId);
                                        
                                        // Use working AJAX verification
                                        const formData = new FormData();
                                        formData.append('action', 'skeepy_clinic_verify_patient');
                                        formData.append('hmo_id', fullHmoId);
                                        formData.append('_wpnonce', '<?php echo wp_create_nonce("verify_patient_nonce"); ?>');
                                        
                                        fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                                            method: 'POST',
                                            body: formData
                                        })
                                        .then(response => response.json())
                                        .then(data => {
                                            console.log('Verification response:', data);
                                            
                                            const patientDiv = document.getElementById('patient-info-display') || 
                                                             document.querySelector('.patient-info-display') ||
                                                             document.querySelector('[id*="patient"]');
                                            const errorDiv = document.getElementById('hmo-error-message') ||
                                                           document.querySelector('.hmo-error-message') ||
                                                           document.querySelector('[id*="error"]');
                                            
                                            if (data.success) {
                                                // Show patient details with close button and all fields
                                                const patientInfo = `
                                                    <div id="patient-verification-card" style="background: #D1FAE5; border: 1px solid #10B981; border-radius: 8px; padding: 16px; margin-top: 16px; position: relative;">
                                                        <button onclick="document.getElementById('patient-verification-card').remove();" style="position: absolute; top: 8px; right: 8px; background: #DC2626; color: white; border: none; border-radius: 4px; width: 24px; height: 24px; cursor: pointer; font-size: 12px; font-weight: bold;">×</button>
                                                        <h4 style="color: #047857; margin: 0 0 12px 0; font-size: 16px; font-weight: 600;">Patient Found</h4>
                                                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; font-size: 14px;">
                                                            <div><strong>Pet Name:</strong> ${data.data.pet_name}</div>
                                                            <div><strong>HMO ID:</strong> ${data.data.hmo_id}</div>
                                                            <div><strong>Pet Type:</strong> ${data.data.pet_type}</div>
                                                            <div><strong>Breed:</strong> ${data.data.pet_breed}</div>
                                                            <div><strong>Gender:</strong> ${data.data.pet_gender}</div>
                                                            <div><strong>Pet Color:</strong> ${data.data.pet_color || 'Not specified'}</div>
                                                            <div><strong>Pet Age:</strong> ${data.data.pet_age || 'Not specified'} Years Old</div>
                                                            <div><strong>Plan Status:</strong> Active</div>
                                                            <div><strong>Plan Expiry:</strong> ${data.data.expiry_date || 'Not specified'}</div>
                                                            <div><strong>Guardian:</strong> ${data.data.guardian_name}</div>
                                                        </div>
                                                    </div>
                                                `;
                                                
                                                if (patientDiv) {
                                                    patientDiv.innerHTML = patientInfo;
                                                    patientDiv.style.display = 'block';
                                                } else {
                                                    // Create new div after the button
                                                    const newDiv = document.createElement('div');
                                                    newDiv.innerHTML = patientInfo;
                                                    btn.parentNode.insertBefore(newDiv, btn.nextSibling);
                                                }
                                                
                                                if (errorDiv) errorDiv.style.display = 'none';
                                                
                                                // Set global verification data for form submission
                                                window.verifiedHMOData = data.data;
                                                verifiedHMOData = data.data;
                                                console.log('HMO Verification successful, setting verifiedHMOData:', verifiedHMOData);
                                            } else {
                                                // Show error
                                                const errorMsg = data.data || 'HMO ID does not exist';
                                                if (errorDiv) {
                                                    errorDiv.textContent = errorMsg;
                                                    errorDiv.style.display = 'block';
                                                } else {
                                                    alert(errorMsg);
                                                }
                                                if (patientDiv) patientDiv.style.display = 'none';
                                            }
                                        })
                                        .catch(error => {
                                            console.error('Verification error:', error);
                                            alert('Verification failed. Please try again.');
                                        });
                                    } else {
                                        console.log('HMO input field not found');
                                        alert('HMO input field not found');
                                    }
                                });
                                
                                console.log('Attached new verification handler to button');
                            }
                        });
                    }
                    
                    // Also override global functions
                    window.verifyHMOID = function() {
                        verifyClaimsFormHMO();
                    };
                    
                    window.verifyPatient = function() {
                        verifyClaimsFormHMO();
                    };
                    
                    window.skeepy_verify_hmo = function() {
                        verifyClaimsFormHMO();
                    };
                }, 2000);
            }

            function verifyClaimsFormHMO() {
                // Find the HMO input field in Claims Form
                const hmoInput = document.querySelector('input[name*="hmo"], input[id*="hmo"], input[placeholder*="HMO"], input[placeholder*="SKEEPYHMO"]');
                
                if (!hmoInput) {
                    alert('HMO input field not found');
                    return;
                }
                
                const hmoValue = hmoInput.value.trim();
                
                if (!hmoValue) {
                    alert('Please enter an HMO ID');
                    return;
                }
                
                // If user entered only 6 characters, add the SKEEPYHMO- prefix
                let fullHmoId = hmoValue;
                if (hmoValue.length === 6 && !hmoValue.includes('SKEEPYHMO-')) {
                    fullHmoId = 'SKEEPYHMO-' + hmoValue;
                }
                
                // Use the same working verification as Quick Access
                const formData = new FormData();
                formData.append('action', 'skeepy_clinic_verify_patient');
                formData.append('hmo_id', fullHmoId);
                formData.append('_wpnonce', '<?php echo wp_create_nonce("verify_patient_nonce"); ?>');
                
                fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show success message and patient details
                        showClaimsFormPatientDetails(data.data);
                    } else {
                        // Show error message
                        showClaimsFormError(data.data || 'HMO ID does not exist.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showClaimsFormError('Verification failed. Please try again.');
                });
            }

            function showClaimsFormPatientDetails(patient) {
                // Find where to display patient details in Claims Form
                let resultDiv = document.querySelector('#patient-details, .patient-details, #verification-result, .verification-result');
                
                if (!resultDiv) {
                    // Create result div if it doesn't exist
                    resultDiv = document.createElement('div');
                    resultDiv.id = 'claims-patient-details';
                    resultDiv.style.marginTop = '20px';
                    
                    // Insert after HMO input
                    const hmoInput = document.querySelector('input[name*="hmo"], input[id*="hmo"], input[placeholder*="HMO"], input[placeholder*="SKEEPYHMO"]');
                    if (hmoInput && hmoInput.parentNode) {
                        hmoInput.parentNode.insertBefore(resultDiv, hmoInput.nextSibling);
                    }
                }
                
                // Display patient details
                resultDiv.innerHTML = `
                    <div style="background: #F0FDF4; border: 1px solid #10B981; border-radius: 8px; padding: 16px; margin-top: 16px;">
                        <h4 style="color: #10B981; margin-bottom: 12px; font-size: 16px;">✓ Pet Verified Successfully</h4>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 14px;">
                            <div><strong>Pet Name:</strong> ${patient.pet_name}</div>
                            <div><strong>HMO ID:</strong> ${patient.hmo_id}</div>
                            <div><strong>Pet Type:</strong> ${patient.pet_type}</div>
                            <div><strong>Plan Type:</strong> ${patient.plan_type}</div>
                            <div><strong>Guardian:</strong> ${patient.guardian_name}</div>
                            <div><strong>Phone:</strong> ${patient.guardian_phone}</div>
                        </div>
                    </div>
                `;
            }

            function generateRealCoverageInfo(patient) {
                const planType = patient.plan_type;
                const hmoId = patient.hmo_id;
                // Use same logic as expiry date calculation: activation_date with registration_date fallback
                const planStartDate = patient.activation_date || patient.registration_date;
                
                if (!planStartDate) {
                    return '<div class="info-item"><span class="info-value">Plan start date not available - contact support for coverage details</span></div>';
                }
                
                const startDate = new Date(planStartDate);
                const currentDate = new Date();
                
                // Get plan details and usage data with real patient data
                const { coverageData, usageData } = getCoverageAndUsageByPlan(planType, hmoId, patient);
                
                let coverageHtml = `
                    <div style="max-height: 400px; overflow-y: auto; border-radius: 6px; border: 1px solid #E5E7EB;">
                `;
                
                // Generate only COVERED benefit items with real-time availability and usage tracking
                coverageData.benefits.forEach((benefit, index) => {
                    // Skip "Not Covered" benefits - they should not appear at all
                    if (benefit.coverage === 'Not Covered') {
                        return;
                    }
                    
                    const waitingDays = benefit.waitingDays;
                    const availableDate = new Date(startDate);
                    availableDate.setDate(availableDate.getDate() + waitingDays);
                    const isAvailable = currentDate >= availableDate;
                    
                    // Special handling for Surgery - simplified to show only coverage
                    if (benefit.name === 'Surgery') {
                        coverageHtml += `
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; border-bottom: 1px solid #F3F4F6; background: #F0FDF4;">
                                <div style="flex: 1; min-width: 0; margin-right: 12px;">
                                    <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">Surgery</div>
                                    <div style="color: #6B7280; font-size: 12px; margin-top: 2px;">${benefit.coverage}</div>
                                </div>
                                <div style="display: flex; align-items: center; color: #10B981; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                                    <span style="margin-right: 4px; font-size: 12px;">✓</span>
                                    <span>Available Now</span>
                                </div>
                            </div>
                        `;
                    } else {
                        // Regular benefits with date availability and real usage
                        let statusText, statusColor, statusIcon;
                        if (isAvailable) {
                            statusText = 'Available Now';
                            statusColor = '#10B981';
                            statusIcon = '✓';
                        } else {
                            statusText = availableDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                            statusColor = '#F59E0B';
                            statusIcon = '⏱';
                        }
                        
                        // Get real usage for this benefit from patient data
                        const usage = usageData[benefit.name] || { used: 0, amount: 0 };
                        let coverageText = benefit.coverage;
                        
                        // Update coverage text with real usage if applicable - SIMPLIFIED to show remaining/total
                        if (benefit.countable && benefit.maxPerYear > 0) {
                            const remaining = benefit.maxPerYear - usage.used;
                            coverageText = `${remaining}/${benefit.maxPerYear}`;
                        }
                        
                        coverageHtml += `
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; border-bottom: 1px solid #F3F4F6;">
                                <div style="flex: 1; min-width: 0; margin-right: 12px;">
                                    <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">${benefit.name}</div>
                                    <div style="color: #6B7280; font-size: 12px; margin-top: 2px;">${coverageText}</div>
                                </div>
                                <div style="display: flex; align-items: center; color: ${statusColor}; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                                    <span style="margin-right: 4px; font-size: 12px;">${statusIcon}</span>
                                    <span>${statusText}</span>
                                </div>
                            </div>
                        `;
                    }
                });
                
                // Add Annual Coverage Limit before Clinic Category
                const totalUsed = Object.values(usageData).reduce((sum, usage) => sum + usage.amount, 0);
                const totalLimit = parseInt(coverageData.annualLimit.replace(/[₦,]/g, ''));
                const remaining = totalLimit - totalUsed;
                const formattedRemaining = remaining.toLocaleString();
                const formattedLimit = totalLimit.toLocaleString();
                
                coverageHtml += `
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; border-bottom: 1px solid #F3F4F6; background: #F9FAFB;">
                        <div style="flex: 1; min-width: 0; margin-right: 12px;">
                            <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">Annual Coverage Limit</div>
                        </div>
                        <div style="display: flex; align-items: center; color: #145362; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                            <span>₦${formattedRemaining}/₦${formattedLimit}</span>
                        </div>
                    </div>
                `;
                
                // Add Clinic Category as last item
                const categoryNumber = coverageData.clinicCategory.replace(' Clinics', '');
                coverageHtml += `
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; background: #F9FAFB;">
                        <div style="flex: 1; min-width: 0; margin-right: 12px;">
                            <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">Clinic Category</div>
                        </div>
                        <div style="display: flex; align-items: center; color: #145362; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                            <span>${categoryNumber}</span>
                        </div>
                    </div>
                `;
                
                coverageHtml += `
                        </div>
                `;
                
                return coverageHtml;
            }

            function generateCoverageInfo(patient) {
                const planType = patient.plan_type;
                const hmoId = patient.hmo_id;
                // Use same logic as expiry date calculation: activation_date with registration_date fallback
                const planStartDate = patient.activation_date || patient.registration_date;
                
                if (!planStartDate) {
                    return '<div class="info-item"><span class="info-value">Plan start date not available - contact support for coverage details</span></div>';
                }
                
                const startDate = new Date(planStartDate);
                const currentDate = new Date();
                
                // Get plan details and usage data
                const { coverageData, usageData } = getCoverageAndUsageByPlan(planType, hmoId, patient);
                

                
                let coverageHtml = `
                    <div style="max-height: 400px; overflow-y: auto; border-radius: 6px; border: 1px solid #E5E7EB;">
                `;
                
                // Generate only COVERED benefit items with real-time availability and usage tracking
                coverageData.benefits.forEach((benefit, index) => {
                    // Skip "Not Covered" benefits - they should not appear at all
                    if (benefit.coverage === 'Not Covered') {
                        return;
                    }
                    
                    const waitingDays = benefit.waitingDays;
                    const availableDate = new Date(startDate);
                    availableDate.setDate(availableDate.getDate() + waitingDays);
                    const isAvailable = currentDate >= availableDate;
                    
                    // Special handling for Surgery - show amount limit on right side only, no date
                    if (benefit.name === 'Surgery') {
                        const surgeryLimit = benefit.coverage.replace('₦', '').replace(',', '');
                        const formattedLimit = parseInt(surgeryLimit).toLocaleString();
                        
                        coverageHtml += `
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; border-bottom: 1px solid #F3F4F6; background: #F0FDF4;">
                                <div style="flex: 1; min-width: 0; margin-right: 12px;">
                                    <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">Surgery</div>
                                </div>
                                <div style="display: flex; align-items: center; color: #10B981; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                                    <span style="margin-right: 4px; font-size: 12px;">✓</span>
                                    <span>₦${formattedLimit} limit</span>
                                </div>
                            </div>
                        `;
                    } else {
                        // Regular benefits with date availability
                        let statusText, statusColor, statusIcon;
                        if (isAvailable) {
                            statusText = 'Available Now';
                            statusColor = '#10B981';
                            statusIcon = '✓';
                        } else {
                            statusText = availableDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                            statusColor = '#F59E0B';
                            statusIcon = '⏱';
                        }
                        
                        // Get usage for this benefit
                        const usage = usageData[benefit.name] || { used: 0, amount: 0 };
                        let coverageText = benefit.coverage;
                        
                        // Update coverage text with usage if applicable
                        if (benefit.countable && benefit.maxPerYear > 0) {
                            const remaining = benefit.maxPerYear - usage.used;
                            coverageText = `${remaining}/${benefit.maxPerYear} per year`;
                        }
                        
                        coverageHtml += `
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; border-bottom: 1px solid #F3F4F6; background: ${isAvailable ? '#F0FDF4' : '#FFFBEB'};">
                                <div style="flex: 1; min-width: 0; margin-right: 12px;">
                                    <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">${benefit.name}</div>
                                    <div style="color: #6B7280; font-size: 12px; margin-top: 2px;">${coverageText}</div>
                                </div>
                                <div style="display: flex; align-items: center; color: ${statusColor}; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                                    <span style="margin-right: 4px; font-size: 12px;">${statusIcon}</span>
                                    <span>${statusText}</span>
                                </div>
                            </div>
                        `;
                    }
                });
                
                // Add Annual Coverage Limit before Clinic Category
                const totalUsed = Object.values(usageData).reduce((sum, usage) => sum + usage.amount, 0);
                const totalLimit = parseInt(coverageData.annualLimit.replace(/[₦,]/g, ''));
                const remaining = totalLimit - totalUsed;
                const formattedRemaining = remaining.toLocaleString();
                const formattedLimit = totalLimit.toLocaleString();
                
                coverageHtml += `
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; border-bottom: 1px solid #F3F4F6; background: #F9FAFB;">
                        <div style="flex: 1; min-width: 0; margin-right: 12px;">
                            <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">Annual Coverage Limit</div>
                        </div>
                        <div style="display: flex; align-items: center; color: #145362; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                            <span>₦${formattedRemaining}/₦${formattedLimit}</span>
                        </div>
                    </div>
                `;
                
                // Add Clinic Category as last item
                const categoryNumber = coverageData.clinicCategory.replace(' Clinics', '');
                coverageHtml += `
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; padding: 12px 16px; background: #F9FAFB;">
                        <div style="flex: 1; min-width: 0; margin-right: 12px;">
                            <div style="font-weight: 500; color: #374151; font-size: 14px; line-height: 1.4; word-wrap: break-word;">Clinic Category</div>
                        </div>
                        <div style="display: flex; align-items: center; color: #145362; font-size: 11px; font-weight: 600; white-space: nowrap; flex-shrink: 0;">
                            <span>${categoryNumber}</span>
                        </div>
                    </div>
                `;
                
                coverageHtml += `
                        </div>
                `;
                
                return coverageHtml;
            }

            function getCoverageAndUsageByPlan(planType, hmoId, patient = null) {
                // Plan data with EXACT benefits and waiting periods from the document
                const plans = {
                    'Pawtastic': {
                        annualLimit: '360,000',
                        clinicCategory: 'Category 1 Clinics',
                        benefits: [
                            { name: 'General Consultation', coverage: 'Covered', waitingDays: 1, countable: false, maxPerYear: 0 },
                            { name: 'Deworming', coverage: '1/year', waitingDays: 30, countable: true, maxPerYear: 1 },
                            { name: 'Rabies Vaccine', coverage: '1/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Basic Grooming', coverage: '1/year', waitingDays: 60, countable: true, maxPerYear: 1 },
                            { name: 'Surgery', coverage: '₦50,000', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Spaying', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Neutering', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Wound Repair', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Tail Removal', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Mass Removal', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Trauma Surgery', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Gastrointestinal Surgery', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Ophthalmic Procedure', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Orthopedic Procedure', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Pet Sitting', coverage: '1 hour/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Pet Boarding', coverage: '1 day/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Emergencies', coverage: 'Covered', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Basic Bloodwork', coverage: '1/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Intestinal/Fecal Exams', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Urinalysis', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Advanced Diagnostics', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Bordetella Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Canine Flu Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Chronic Disease Medication', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Comprehensive Blood Work', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Comprehensive Physical Exams', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Dental Cleaning', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Emergency Boarding', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'FeLV Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'FVRCP Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Feline Chlamydia Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Flea and Tick Prevention', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Microchipping', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Premium Grooming', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Routine Medication for Infections', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Supplements Prescribed by Vet', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Dental Surgery', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Travel Health Certificate', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 }
                        ]
                    },
                    'Furrtastic': {
                        annualLimit: '1,200,000',
                        clinicCategory: 'Category 2 Clinics',
                        benefits: [
                            { name: 'General Consultation', coverage: 'Covered', waitingDays: 1, countable: false, maxPerYear: 0 },
                            { name: 'Deworming', coverage: '2/year', waitingDays: 30, countable: true, maxPerYear: 2 },
                            { name: 'Rabies Vaccine', coverage: '2/year', waitingDays: 120, countable: true, maxPerYear: 2 },
                            { name: 'Basic Grooming', coverage: '3/year', waitingDays: 60, countable: true, maxPerYear: 3 },
                            { name: 'Surgery', coverage: '₦150,000', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Spaying', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Neutering', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Wound Repair', coverage: 'Part of Surgery Limit', waitingDays: 240, countable: false, maxPerYear: 0 },
                            { name: 'Tail Removal', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Mass Removal', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Trauma Surgery', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Gastrointestinal Surgery', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Ophthalmic Procedure', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Orthopedic Procedure', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Pet Sitting', coverage: '2 hours/year', waitingDays: 120, countable: true, maxPerYear: 2 },
                            { name: 'Pet Boarding', coverage: '2 days/year', waitingDays: 120, countable: true, maxPerYear: 2 },
                            { name: 'Emergencies', coverage: 'Covered', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Basic Bloodwork', coverage: '1/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Intestinal/Fecal Exams', coverage: '1/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Urinalysis', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Advanced Diagnostics', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Bordetella Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Canine Flu Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Chronic Disease Medication', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Comprehensive Blood Work', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Comprehensive Physical Exams', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Dental Cleaning', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Emergency Boarding', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'FeLV Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'FVRCP Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Feline Chlamydia Vaccine', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Flea and Tick Prevention', coverage: '1/year', waitingDays: 240, countable: true, maxPerYear: 1 },
                            { name: 'Microchipping', coverage: '1/year', waitingDays: 240, countable: true, maxPerYear: 1 },
                            { name: 'Premium Grooming', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Routine Medication for Infections', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Supplements Prescribed by Vet', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 },
                            { name: 'Dental Surgery', coverage: 'Part of Surgery Limit (₦150,000)', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Travel Health Certificate', coverage: 'Not Covered', waitingDays: 0, countable: false, maxPerYear: 0 }
                        ]
                    },
                    'Purrfect': {
                        annualLimit: '2,200,000',
                        clinicCategory: 'Category 3 Clinics',
                        benefits: [
                            { name: 'General Consultation', coverage: 'Covered', waitingDays: 1, countable: false, maxPerYear: 0 },
                            { name: 'Deworming', coverage: '4/year', waitingDays: 30, countable: true, maxPerYear: 4 },
                            { name: 'Rabies Vaccine', coverage: '3/year', waitingDays: 120, countable: true, maxPerYear: 3 },
                            { name: 'Basic Grooming', coverage: '4/year', waitingDays: 60, countable: true, maxPerYear: 4 },
                            { name: 'Surgery', coverage: '₦250,000', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Spaying', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Neutering', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Wound Repair', coverage: 'Part of Surgery Limit', waitingDays: 240, countable: false, maxPerYear: 0 },
                            { name: 'Tail Removal', coverage: 'Part of Surgery Limit', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Mass Removal', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Trauma Surgery', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Gastrointestinal Surgery', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Ophthalmic Procedure', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Orthopedic Procedure', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Pet Sitting', coverage: '4 hours/year', waitingDays: 120, countable: true, maxPerYear: 4 },
                            { name: 'Pet Boarding', coverage: '7 days/year', waitingDays: 120, countable: true, maxPerYear: 7 },
                            { name: 'Emergencies', coverage: 'Covered', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Basic Bloodwork', coverage: '1/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Intestinal/Fecal Exams', coverage: '1/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Urinalysis', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Advanced Diagnostics', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Bordetella Vaccine', coverage: '1/year', waitingDays: 300, countable: true, maxPerYear: 1 },
                            { name: 'Canine Flu Vaccine', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Chronic Disease Medication', coverage: 'Capped at ₦16,300', waitingDays: 240, countable: false, maxPerYear: 0 },
                            { name: 'Comprehensive Blood Work', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Comprehensive Physical Exams', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Dental Cleaning', coverage: 'Capped at ₦10,200', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Emergency Boarding', coverage: '2 days/year', waitingDays: 180, countable: true, maxPerYear: 2 },
                            { name: 'FeLV Vaccine', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'FVRCP Vaccine', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Feline Chlamydia Vaccine', coverage: '1/year', waitingDays: 180, countable: true, maxPerYear: 1 },
                            { name: 'Flea and Tick Prevention', coverage: '2/year', waitingDays: 240, countable: true, maxPerYear: 2 },
                            { name: 'Microchipping', coverage: '1/year', waitingDays: 240, countable: true, maxPerYear: 1 },
                            { name: 'Premium Grooming', coverage: '1/year', waitingDays: 120, countable: true, maxPerYear: 1 },
                            { name: 'Routine Medication for Infections', coverage: 'Capped at ₦15,200', waitingDays: 240, countable: false, maxPerYear: 0 },
                            { name: 'Supplements Prescribed by Vet', coverage: 'Capped at ₦5,500', waitingDays: 180, countable: false, maxPerYear: 0 },
                            { name: 'Dental Surgery', coverage: 'Part of Surgery Limit', waitingDays: 300, countable: false, maxPerYear: 0 },
                            { name: 'Travel Health Certificate', coverage: '1/year', waitingDays: 300, countable: true, maxPerYear: 1 }
                        ]
                    }
                };
                
                // Handle both uppercase and lowercase plan types from database
                const normalizedPlanType = planType.charAt(0).toUpperCase() + planType.slice(1).toLowerCase();
                let coverageData;
                
                if (normalizedPlanType === 'Pawtastic') {
                    coverageData = plans['Pawtastic'];
                } else if (normalizedPlanType === 'Furrtastic') {
                    coverageData = plans['Furrtastic'];
                } else if (normalizedPlanType === 'Purrfect') {
                    coverageData = plans['Purrfect'];
                } else {
                    // Default to Pawtastic if plan type is not recognized
                    coverageData = plans['Pawtastic'];
                }
                
                // Mock usage data - in real implementation, this would query the claims database
                // Use real usage data from patient object if available
                let usageData = {};
                if (patient && patient.service_usage) {
                    // Convert service_usage format to match expected format
                    for (const [serviceName, usage] of Object.entries(patient.service_usage)) {
                        usageData[serviceName] = {
                            used: usage.count_used || 0,
                            amount: usage.amount_used || 0
                        };
                    }
                }
                
                return { coverageData, usageData };
            }

            function showClaimsFormError(message) {
                // Find where to display error in Claims Form
                let resultDiv = document.querySelector('#patient-details, .patient-details, #verification-result, .verification-result');
                
                if (!resultDiv) {
                    // Create result div if it doesn't exist
                    resultDiv = document.createElement('div');
                    resultDiv.id = 'claims-patient-details';
                    resultDiv.style.marginTop = '20px';
                    
                    // Insert after HMO input
                    const hmoInput = document.querySelector('input[name*="hmo"], input[id*="hmo"], input[placeholder*="HMO"], input[placeholder*="SKEEPYHMO"]');
                    if (hmoInput && hmoInput.parentNode) {
                        hmoInput.parentNode.insertBefore(resultDiv, hmoInput.nextSibling);
                    }
                }
                
                // Display error message
                resultDiv.innerHTML = `
                    <div style="background: #FEE2E2; border: 1px solid #DC2626; border-radius: 8px; padding: 16px; margin-top: 16px;">
                        <h4 style="color: #DC2626; margin-bottom: 8px; font-size: 16px;">⚠ ${message}</h4>
                    </div>
                `;
            }

            // Function to fetch claims usage data for automated benefit deduction
            function fetchClaimsUsageData(hmoId, patientData) {
                const formData = new FormData();
                formData.append('action', 'skeepy_get_claims_usage');
                formData.append('hmo_id', hmoId);
                
                fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(claimsData => {
                    if (claimsData.success) {
                        updateCoverageDisplay(patientData, claimsData.data);
                    }
                })
                .catch(error => {
                    console.error('Claims usage fetch error:', error);
                });
            }
            
            // Function to update coverage display with real-time benefit usage
            function updateCoverageDisplay(patientData, claimsUsage) {
                const coverageDiv = document.getElementById('coverage-display');
                if (!coverageDiv) return;
                
                const planType = patientData.plan_type;
                const benefitUsage = claimsUsage.service_usage || {};
                const totalCoverageUsed = claimsUsage.total_coverage_used || 0;
                
                // Get plan-specific coverage limits
                const annualLimits = {
                    'Pawtastic': 360000,
                    'Furrtastic': 1200000, 
                    'Purrfect': 2200000
                };
                
                const annualLimit = annualLimits[planType] || 0;
                const remainingCoverage = Math.max(0, annualLimit - totalCoverageUsed);
                
                let coverageHtml = `
                    <div style="border-top: 1px solid #E5E7EB; padding-top: 16px;">
                        <h5 style="color: #047857; margin: 0 0 12px 0; font-size: 14px; font-weight: 600;">Coverage Status</h5>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 13px;">
                            <div><strong>Annual Limit:</strong> ₦${annualLimit.toLocaleString()}</div>
                            <div><strong>Used:</strong> ₦${totalCoverageUsed.toLocaleString()}</div>
                            <div><strong>Remaining:</strong> ₦${remainingCoverage.toLocaleString()}</div>
                            <div><strong>Plan:</strong> ${planType}</div>
                        </div>
                `;
                
                // Show specific benefit usage if any claims exist
                if (Object.keys(benefitUsage).length > 0) {
                    coverageHtml += `
                        <div style="margin-top: 12px;">
                            <strong style="font-size: 12px; color: #374151;">Benefits Used:</strong>
                            <div style="margin-top: 4px; font-size: 11px;">
                    `;
                    
                    for (const [serviceName, usage] of Object.entries(benefitUsage)) {
                        coverageHtml += `
                            <div style="color: #6B7280; margin-bottom: 2px;">
                                ${serviceName}: ${usage.count_used} used (₦${usage.amount_used.toLocaleString()})
                            </div>
                        `;
                    }
                    
                    coverageHtml += `</div></div>`;
                }
                
                coverageHtml += `</div>`;
                coverageDiv.innerHTML = coverageHtml;
            }

            // Claims form verification function
            function verifyPatient() {
                const hmoInput = document.getElementById('patient_hmo_id');
                if (!hmoInput) {
                    console.log('HMO input field not found');
                    return;
                }
                
                const hmoId = hmoInput.value.trim();
                if (!hmoId) {
                    alert('Please enter a Pet HMO ID');
                    return;
                }
                
                console.log('Verifying HMO ID:', hmoId);
                
                // Use the existing AJAX handler with proper 6-character HMO handling
                let fullHmoId = hmoId;
                if (hmoId.length === 6 && !hmoId.includes('SKEEPYHMO-')) {
                    fullHmoId = 'SKEEPYHMO-' + hmoId;
                }
                
                console.log('Full HMO ID to verify:', fullHmoId);
                
                const formData = new FormData();
                formData.append('action', 'skeepy_clinic_verify_patient');
                formData.append('hmo_id', fullHmoId);
                formData.append('_wpnonce', '<?php echo wp_create_nonce('verify_patient_nonce'); ?>');
                
                console.log('Sending verification request...');
                
                fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    console.log('Verification response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Verification response:', data);
                    
                    const patientDiv = document.getElementById('patient-info-display');
                    const errorDiv = document.getElementById('hmo-error-message');
                    
                    if (data.success) {
                        // Fetch claims usage for real-time benefit deduction
                        fetchClaimsUsageData(fullHmoId, data.data);
                        
                        // Show patient details
                        if (patientDiv) {
                            patientDiv.innerHTML = `
                                <div style="background: #D1FAE5; border: 1px solid #10B981; border-radius: 8px; padding: 16px; margin-top: 16px;">
                                    <h4 style="color: #047857; margin: 0 0 12px 0; font-size: 16px; font-weight: 600;">Patient Found</h4>
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; font-size: 14px;">
                                        <div><strong>Pet Name:</strong> ${data.data.pet_name}</div>
                                        <div><strong>HMO ID:</strong> ${data.data.hmo_id}</div>
                                        <div><strong>Pet Type:</strong> ${data.data.pet_type}</div>
                                        <div><strong>Breed:</strong> ${data.data.pet_breed}</div>
                                        <div><strong>Gender:</strong> ${data.data.pet_gender}</div>
                                        <div><strong>Guardian:</strong> ${data.data.guardian_name}</div>
                                    </div>
                                    <div id="coverage-display" style="margin-top: 16px;"></div>
                                </div>
                            `;
                            patientDiv.style.display = 'block';
                        }
                        if (errorDiv) errorDiv.style.display = 'none';
                    } else {
                        // Show error message
                        console.error('Verification failed:', data.data);
                        if (errorDiv) {
                            errorDiv.textContent = data.data || 'HMO ID does not exist';
                            errorDiv.style.display = 'block';
                        }
                        if (patientDiv) patientDiv.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Verification error:', error);
                    const errorDiv = document.getElementById('hmo-error-message');
                    if (errorDiv) {
                        errorDiv.textContent = 'Network error. Please try again.';
                        errorDiv.style.display = 'block';
                    }
                });
            }
            
            // Make function globally accessible for Claims Form buttons
            window.verifyPatient = verifyPatient;
            window.skeepyVerifyPatient = verifyPatient;

            // Initialize on page load - CONSOLIDATED INITIALIZATION
            document.addEventListener('DOMContentLoaded', function() {
                console.log('Dashboard initializing...');
                
                // Core dashboard functions
                updateDisplay();
                loadDashboardStats();
                startAutoRefresh();
                fixClaimsFormVerification();
                
                // Initialize Claims Dashboard
                loadClaimsData();
                
                // Setup date filter
                setupDateFilter();
                
                // Setup Sign Out button event listener
                setTimeout(function() {
                    const yesButton = document.getElementById('confirm-signout-btn');
                    if (yesButton) {
                        console.log('Found Yes button, adding event listener');
                        yesButton.addEventListener('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            console.log('Yes button clicked via event listener');
                            
                            // Direct AJAX logout then redirect
                            fetch('<?php echo admin_url("admin-ajax.php"); ?>', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                },
                                body: new URLSearchParams({
                                    'action': 'skeepy_logout',
                                    'nonce': '<?php echo wp_create_nonce("skeepy_logout_nonce"); ?>'
                                })
                            })
                            .then(() => {
                                window.location.href = '/clinic-signin';
                            })
                            .catch(() => {
                                window.location.href = '/clinic-signin';
                            });
                        });
                    }
                }, 1000);
                
                // Add form submission validation for claims form
                setTimeout(function() {
                    const claimsForm = document.querySelector('#submit-claim-section form');
                    if (claimsForm) {
                        // PROPER FORM VALIDATION - Check for verifiedHMOData global variable
                        claimsForm.addEventListener('submit', function(e) {
                            if (!window.verifiedHMOData && !verifiedHMOData) {
                                e.preventDefault();
                                alert('Please verify the Pet HMO ID before submitting the claim.');
                                const hmoInput = document.getElementById('patient_hmo_id');
                                if (hmoInput) {
                                    hmoInput.focus();
                                }
                                return false;
                            }
                        });
                    }
                }, 1000);
            });
        </script>
    </div>
    <?php
    return ob_get_clean();
}

// AJAX handler for automated benefit deduction - queries approved claims usage
function skeepy_get_claims_usage_handler() {
    global $wpdb;
    
    $hmo_id = sanitize_text_field($_POST['hmo_id']);
    
    if (empty($hmo_id)) {
        wp_send_json_error('HMO ID is required');
        return;
    }
    
    // Query approved and paid claims for this HMO ID using total amount
    $approved_claims = $wpdb->get_results($wpdb->prepare("
        SELECT services, total_amount 
        FROM {$wpdb->prefix}skeepy_claims 
        WHERE patient_hmo_id = %s AND status IN ('approved', 'paid')
    ", $hmo_id));
    
    $benefit_usage = [];
    $total_coverage_used = 0;
    
    foreach ($approved_claims as $claim) {
        $claim_amount = floatval(str_replace(['₦', ','], '', $claim->total_amount));
        
        // Add the TOTAL claim amount to coverage used
        $total_coverage_used += $claim_amount;
        
        // Try to parse services as JSON first, if that fails treat as simple text
        $services_data = json_decode($claim->services, true);
        
        if (is_array($services_data)) {
            // Handle JSON format services
            foreach ($services_data as $service) {
                $service_name = isset($service['service']) ? $service['service'] : (isset($service['name']) ? $service['name'] : 'Unknown Service');
                $quantity = isset($service['quantity']) ? intval($service['quantity']) : 1;
                
                $amount = 0;
                if (isset($service['final_fee'])) {
                    $amount = floatval(str_replace(['₦', ','], '', $service['final_fee']));
                } elseif (isset($service['discounted_price'])) {
                    $amount = floatval(str_replace(['₦', ','], '', $service['discounted_price']));
                } elseif (isset($service['amount'])) {
                    $amount = floatval(str_replace(['₦', ','], '', $service['amount']));
                }
                
                if (!isset($benefit_usage[$service_name])) {
                    $benefit_usage[$service_name] = [
                        'count_used' => 0,
                        'amount_used' => 0
                    ];
                }
                
                $benefit_usage[$service_name]['count_used'] += $quantity;
                $benefit_usage[$service_name]['amount_used'] += $amount;
            }
        } else {
            // Handle simple text format services (like "Consultation")
            $service_name = trim($claim->services);
            if (!empty($service_name)) {
                // Map old service names to new benefit names
                $service_mapping = [
                    'Consultation' => 'General Consultation',
                    'Emergency Consultation' => 'Emergency Consultation',
                    'Vaccination' => 'Routine Vaccinations',
                    'Deworming' => 'Deworming',
                    'Basic Grooming' => 'Basic Grooming',
                    'Premium Grooming' => 'Premium Grooming',
                    'Blood Work' => 'Basic Blood Work',
                    'Physical Exam' => 'Comprehensive Physical Exam',
                    'Dental Cleaning' => 'Dental Cleaning',
                    'Spay/Neuter' => 'Spay/Neuter Surgery'
                ];
                
                // Use mapped name if exists, otherwise use original
                $mapped_service_name = isset($service_mapping[$service_name]) ? $service_mapping[$service_name] : $service_name;
                
                if (!isset($benefit_usage[$mapped_service_name])) {
                    $benefit_usage[$mapped_service_name] = [
                        'count_used' => 0,
                        'amount_used' => 0
                    ];
                }
                
                $benefit_usage[$mapped_service_name]['count_used'] += 1;
                $benefit_usage[$mapped_service_name]['amount_used'] += $claim_amount;
            }
        }
    }
    
    wp_send_json_success([
        'benefit_usage' => $benefit_usage,
        'total_coverage_used' => $total_coverage_used
    ]);
}

// NEW: Benefit usage AJAX handler
function skeepy_get_benefit_usage_handler() {
    if (!wp_verify_nonce($_POST['nonce'], 'benefit_usage_nonce')) {
        wp_send_json_error('Security check failed');
        return;
    }
    
    $hmo_id = sanitize_text_field($_POST['hmo_id']);
    
    $tracker = new SkeepyBenefitTracker();
    $benefit_data = $tracker->calculateUsedBenefits($hmo_id);
    
    if (isset($benefit_data['error'])) {
        wp_send_json_error($benefit_data['error']);
    } else {
        wp_send_json_success($benefit_data);
    }
}

// NEW: Auto deduct benefits AJAX handler
function skeepy_auto_deduct_benefits_handler() {
    if (!wp_verify_nonce($_POST['nonce'], 'auto_deduct_nonce')) {
        wp_send_json_error('Security check failed');
        return;
    }
    
    $hmo_id = sanitize_text_field($_POST['hmo_id']);
    $claim_id = sanitize_text_field($_POST['claim_id']);
    $services = sanitize_text_field($_POST['services']);
    $amount = sanitize_text_field($_POST['amount']);
    
    $tracker = new SkeepyBenefitTracker();
    $result = $tracker->deductBenefitUsage($hmo_id, $claim_id, $services, $amount);
    
    if ($result) {
        wp_send_json_success('Benefits deducted successfully');
    } else {
        wp_send_json_error('Failed to deduct benefits');
    }
}

// ENHANCED: Auto deduct when claims are processed
function skeepy_get_clinic_claims_handler_enhanced() {
    // Call original function first
    skeepy_get_clinic_claims_handler();
    
    // Then auto-deduct benefits for approved/paid claims
    global $wpdb;
    $claims_table = $wpdb->prefix . 'skeepy_claims';
    
    // Get current user's clinic claims
    $current_user = wp_get_current_user();
    $user_email = $current_user->user_email;
    
    $clinic_data = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_clinics WHERE rep_email = %s OR clinic_email = %s",
        $user_email, $user_email
    ));
    
    if ($clinic_data) {
        $approved_claims = $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM $claims_table 
             WHERE (provider_id = %s OR clinic_name = %s) 
             AND status IN ('approved', 'paid') 
             AND patient_hmo_id IS NOT NULL 
             AND patient_hmo_id != ''",
            $clinic_data->provider_id, $clinic_data->clinic_name
        ));
        
        $tracker = new SkeepyBenefitTracker();
        foreach ($approved_claims as $claim) {
            $tracker->deductBenefitUsage(
                $claim->patient_hmo_id,
                $claim->claim_id,
                $claim->services,
                $claim->total_amount
            );
        }
    }
}

// REGISTER AJAX HANDLERS (duplicate skeepy_verify_patient handler removed - already registered above)
add_action('wp_ajax_skeepy_logout_clinic', 'skeepy_logout_clinic_handler');
add_action('wp_ajax_skeepy_get_clinic_claims', 'skeepy_get_clinic_claims_handler');
add_action('wp_ajax_skeepy_get_claims_usage', 'skeepy_get_claims_usage_handler');
add_action('wp_ajax_skeepy_get_benefit_usage', 'skeepy_get_benefit_usage_handler');
add_action('wp_ajax_skeepy_auto_deduct_benefits', 'skeepy_auto_deduct_benefits_handler');

// AUTOMATED BENEFIT DEDUCTION - Deducts from individual HMO ID's annual coverage when claims are submitted
function skeepy_deduct_coverage_on_claim_submission($hmo_id, $claim_amount) {
    global $wpdb;
    
    // Get pet details to determine plan and validate HMO ID
    $pet = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_pets WHERE hmo_id = %s",
        $hmo_id
    ));
    
    if (!$pet) {
        return false;
    }
    
    // Get plan coverage limits
    $coverage_limits = [
        'Pawtastic' => 360000,
        'Furrtastic' => 1200000,
        'Purrfect' => 2200000
    ];
    
    $plan_limit = isset($coverage_limits[$pet->plan_type]) ? $coverage_limits[$pet->plan_type] : 0;
    
    if ($plan_limit == 0) {
        return false;
    }
    
    // Clean the claim amount (remove currency symbols and commas)
    $clean_amount = (float) str_replace(['₦', ','], '', $claim_amount);
    
    // Calculate current total usage from ONLY approved/paid claims for this specific HMO ID
    $current_used = $wpdb->get_var($wpdb->prepare("
        SELECT COALESCE(SUM(CAST(REPLACE(REPLACE(total_amount, '₦', ''), ',', '') AS DECIMAL(10,2))), 0)
        FROM {$wpdb->prefix}skeepy_claims 
        WHERE patient_hmo_id = %s AND status IN ('approved', 'paid')
    ", $hmo_id));
    
    // Calculate new total after this claim
    $new_total_used = (float)$current_used + $clean_amount;
    $remaining_coverage = $plan_limit - $new_total_used;
    
    // Store/update the coverage usage for this specific HMO ID
    $usage_table = $wpdb->prefix . 'skeepy_benefit_usage';
    
    // Check if usage record exists for this HMO ID
    $existing_usage = $wpdb->get_row($wpdb->prepare("
        SELECT * FROM {$usage_table} 
        WHERE hmo_id = %s AND service_name = 'ANNUAL_COVERAGE'
    ", $hmo_id));
    
    if ($existing_usage) {
        // Update existing record
        $wpdb->update(
            $usage_table,
            [
                'total_amount_used' => $new_total_used,
                'last_used_date' => current_time('mysql')
            ],
            [
                'hmo_id' => $hmo_id,
                'service_name' => 'ANNUAL_COVERAGE'
            ]
        );
    } else {
        // Create new usage record for this HMO ID
        $wpdb->insert(
            $usage_table,
            [
                'hmo_id' => $hmo_id,
                'service_name' => 'ANNUAL_COVERAGE',
                'usage_count' => 1,
                'total_amount_used' => $new_total_used,
                'first_used_date' => current_time('mysql'),
                'last_used_date' => current_time('mysql')
            ]
        );
    }
    
    error_log("Coverage deducted for HMO ID {$hmo_id}: Claim ₦{$clean_amount}, New total used: ₦{$new_total_used}, Remaining: ₦{$remaining_coverage}");
    
    return [
        'hmo_id' => $hmo_id,
        'claim_amount' => $clean_amount,
        'total_used' => $new_total_used,
        'remaining_coverage' => $remaining_coverage,
        'plan_limit' => $plan_limit,
        'deduction_successful' => true
    ];
}

// AJAX handler to automatically deduct coverage when claims are approved
add_action('wp_ajax_skeepy_approve_claim_deduction', function() {
    if (!wp_verify_nonce($_POST['nonce'], 'approve_claim_nonce')) {
        wp_send_json_error('Security check failed');
        return;
    }
    
    $hmo_id = sanitize_text_field($_POST['hmo_id']);
    $claim_amount = sanitize_text_field($_POST['claim_amount']);
    
    if ($hmo_id && $claim_amount) {
        $result = skeepy_deduct_coverage_on_claim_submission($hmo_id, $claim_amount);
        
        if ($result && $result['deduction_successful']) {
            wp_send_json_success([
                'message' => 'Coverage deducted successfully',
                'remaining_coverage' => $result['remaining_coverage'],
                'total_used' => $result['total_used']
            ]);
        } else {
            wp_send_json_error('Failed to deduct coverage');
        }
    } else {
        wp_send_json_error('Missing required data');
    }
});

// Hook for when admin approves claims in the admin interface
add_action('skeepy_claim_approved', function($claim_id, $hmo_id, $claim_amount) {
    skeepy_deduct_coverage_on_claim_submission($hmo_id, $claim_amount);
}, 10, 3);
