/**
 * COMPLETE WORKING SYSTEM - BOTH TABLES
 * Complete solution with SkeepyBenefitTracker class and admin interface handlers
 * Fixed to check both wp_skeepy_claims and skeepy_claims tables
 * Fixed admin interface field name mismatch
 * FIXED: Added age/birthday processing to prevent "2025 Years Old" bug
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// ========================================
// WORKING BENEFIT TRACKER CLASS
// ========================================

if (!class_exists('SkeepyBenefitTracker')) {
    class SkeepyBenefitTracker {
        private $wpdb;
        private $usage_table;
        private $pets_table;
        private $claims_table;
        
        public function __construct() {
            global $wpdb;
            $this->wpdb = $wpdb;
            $this->usage_table = $wpdb->prefix . 'skeepy_benefit_usage';
            $this->pets_table = $wpdb->prefix . 'skeepy_pets';
            $this->claims_table = $wpdb->prefix . 'skeepy_claims';
            
            // Create usage table if needed
            $this->maybe_create_usage_table();
        }
        
        private function maybe_create_usage_table() {
            $table_exists = $this->wpdb->get_var("SHOW TABLES LIKE '{$this->usage_table}'");
            
            if (!$table_exists) {
                $sql = "CREATE TABLE {$this->usage_table} (
                    id int(11) NOT NULL AUTO_INCREMENT,
                    hmo_id VARCHAR(50) NOT NULL,
                    service_type VARCHAR(50) NOT NULL DEFAULT 'medical',
                    service_name VARCHAR(100) NOT NULL,
                    usage_count INTEGER NOT NULL DEFAULT 1,
                    amount_used DECIMAL(10,2) NOT NULL DEFAULT 0.00,
                    claim_id VARCHAR(50),
                    usage_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status VARCHAR(20) NOT NULL DEFAULT 'active',
                    plan_year INTEGER DEFAULT YEAR(CURDATE()),
                    PRIMARY KEY (id),
                    INDEX idx_hmo_year (hmo_id, plan_year),
                    INDEX idx_claim_id (claim_id),
                    UNIQUE KEY unique_claim_service (hmo_id, claim_id, service_name)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4";
                
                $this->wpdb->query($sql);
            }
        }
        
        public function getPlanBenefits($plan_type) {
            $benefits = array(
                'pawtastic' => array(
                    'annual_limit' => 360000,
                    'services' => array(
                        'general_consultation' => array('limit' => -1, 'type' => 'unlimited'),
                        'vaccination' => array('limit' => 2, 'type' => 'count'),
                        'deworming' => array('limit' => 1, 'type' => 'count'),
                        'surgery' => array('limit' => 50000, 'type' => 'amount'),
                        'grooming' => array('limit' => 1, 'type' => 'count'),
                        'emergency' => array('limit' => -1, 'type' => 'unlimited')
                    )
                ),
                'furrtastic' => array(
                    'annual_limit' => 1200000,
                    'services' => array(
                        'general_consultation' => array('limit' => -1, 'type' => 'unlimited'),
                        'vaccination' => array('limit' => 3, 'type' => 'count'),
                        'deworming' => array('limit' => 2, 'type' => 'count'),
                        'surgery' => array('limit' => 150000, 'type' => 'amount'),
                        'grooming' => array('limit' => 2, 'type' => 'count'),
                        'emergency' => array('limit' => -1, 'type' => 'unlimited')
                    )
                ),
                'purrfect' => array(
                    'annual_limit' => 2200000,
                    'services' => array(
                        'general_consultation' => array('limit' => -1, 'type' => 'unlimited'),
                        'vaccination' => array('limit' => 4, 'type' => 'count'),
                        'deworming' => array('limit' => 4, 'type' => 'count'),
                        'surgery' => array('limit' => 250000, 'type' => 'amount'),
                        'grooming' => array('limit' => 4, 'type' => 'count'),
                        'emergency' => array('limit' => -1, 'type' => 'unlimited')
                    )
                )
            );
            
            return isset($benefits[strtolower($plan_type)]) ? $benefits[strtolower($plan_type)] : null;
        }
        
        public function calculateUsedBenefits($hmo_id) {
            // Clean HMO ID
            $hmo_id = trim($hmo_id);
            
            // Get pet details
            $pet = $this->wpdb->get_row($this->wpdb->prepare(
                "SELECT * FROM {$this->pets_table} WHERE hmo_id = %s LIMIT 1",
                $hmo_id
            ));
            
            if (!$pet) {
                error_log("Skeepy Benefit Tracker: Pet not found for HMO ID: " . $hmo_id);
                return array('error' => 'Pet not found for HMO ID: ' . $hmo_id);
            }
            
            // FIXED: Process pet age and birthday to prevent "2025 Years Old" bug
            if (isset($pet->pet_birthday) && !empty($pet->pet_birthday) && $pet->pet_birthday !== '0000-00-00') {
                try {
                    $birthday_date = new DateTime($pet->pet_birthday);
                    $today = new DateTime();
                    
                    // Ensure birthday is not in the future and is a valid date
                    if ($birthday_date <= $today && $birthday_date->format('Y') >= 1990) {
                        // Calculate age from birthday for accuracy
                        $age_from_birthday = $birthday_date->diff($today)->y;
                        $pet->pet_age = $age_from_birthday;
                        $pet->pet_birthday = $birthday_date->format('Y-m-d');
                    } else {
                        // Invalid birthday, use stored age if available
                        $pet->pet_age = isset($pet->pet_age) ? intval($pet->pet_age) : 0;
                        $pet->pet_birthday = null;
                    }
                } catch (Exception $e) {
                    // Invalid date format, use stored age if available
                    $pet->pet_age = isset($pet->pet_age) ? intval($pet->pet_age) : 0;
                    $pet->pet_birthday = null;
                }
            } else {
                // No valid birthday, ensure age is integer
                $pet->pet_age = isset($pet->pet_age) ? intval($pet->pet_age) : 0;
                $pet->pet_birthday = null;
            }
            
            // Get plan benefits and limits
            $plan_benefits = $this->getPlanBenefits($pet->plan_type);
            if (!$plan_benefits) {
                return array('error' => 'Invalid plan type: ' . $pet->plan_type);
            }
            
            // FIXED: Calculate service usage from BOTH claim tables
            $service_usage = array();
            $total_coverage_used = 0;
            
            // Get all approved/paid claims for this HMO ID from wp_skeepy_claims table
            $claims_wp = $this->wpdb->get_results($this->wpdb->prepare(
                "SELECT * FROM {$this->claims_table} WHERE patient_hmo_id = %s AND status IN ('approved', 'paid', 'Approved', 'Paid', 'APPROVED', 'PAID')",
                $hmo_id
            ));
            
            // Get all approved/paid claims for this HMO ID from skeepy_claims table (without wp_ prefix)
            $claims_no_prefix = $this->wpdb->get_results($this->wpdb->prepare(
                "SELECT * FROM skeepy_claims WHERE patient_hmo_id = %s AND status IN ('approved', 'paid', 'Approved', 'Paid', 'APPROVED', 'PAID')",
                $hmo_id
            ));
            
            // Combine claims from both tables
            $claims = array_merge($claims_wp, $claims_no_prefix);
            
            error_log("Unified Tracker: Found " . count($claims_wp) . " claims in wp_skeepy_claims and " . count($claims_no_prefix) . " claims in skeepy_claims for HMO " . $hmo_id);
            
            foreach ($claims as $claim) {
                // FIXED: Handle total_amount field properly - it might be stored as number or string
                $claim_amount = floatval(str_replace(['â‚¦', ',', ' '], '', $claim->total_amount));
                $total_coverage_used += $claim_amount;
                
                error_log("Unified Tracker: Processing claim {$claim->claim_id} with amount: {$claim_amount}");
                
                // Parse services from claim using exact same logic as clinic dashboard
                $services = $this->parseClaimServices($claim->services);
                
                foreach ($services as $service) {
                    $service_name = trim($service['name']);
                    $service_amount = floatval($service['amount']);
                    
                    // FIXED: For simple text services without explicit amounts, use the claim total divided by service count
                    if ($service_amount == 0 && count($services) == 1) {
                        $service_amount = $claim_amount;
                    } else if ($service_amount == 0 && count($services) > 1) {
                        // For multiple services with no individual amounts, distribute total evenly
                        $service_amount = $claim_amount / count($services);
                    }
                    
                    // FIXED: Clean service name - remove quotes and brackets
                    $service_name = str_replace(['"', "'", '[', ']'], '', $service_name);
                    $service_name = trim($service_name);
                    
                    // Skip empty service names
                    if (empty($service_name)) {
                        continue;
                    }
                    
                    // FIXED: Normalize service names to prevent duplicates and match coverage names
                    $service_name = ucfirst(strtolower($service_name));
                    if ($service_name === 'General consultation' || $service_name === 'Consultation') {
                        $service_name = 'General Consultation';
                    }
                    if ($service_name === 'Basic grooming') {
                        $service_name = 'Basic Grooming';
                    }
                    
                    if (!isset($service_usage[$service_name])) {
                        $service_usage[$service_name] = array(
                            'count_used' => 0,    // For unified system
                            'amount_used' => 0,   // For unified system
                            'used_count' => 0,    // For admin interface compatibility
                            'used_amount' => 0    // For admin interface compatibility
                        );
                    }
                    
                    $service_usage[$service_name]['count_used']++;
                    $service_usage[$service_name]['amount_used'] += $service_amount;
                    $service_usage[$service_name]['used_count']++;  // Admin interface compatibility
                    $service_usage[$service_name]['used_amount'] += $service_amount; // Admin interface compatibility
                    
                    error_log("Unified Tracker: Added {$service_name} with amount {$service_amount}");
                }
            }
            
            $remaining = max(0, $plan_benefits['annual_limit'] - $total_coverage_used);
            
            error_log("Unified Tracker: Service usage for " . $hmo_id . ": " . print_r($service_usage, true));
            error_log("Unified Tracker: Total coverage used: â‚¦" . number_format($total_coverage_used));
            
            return array(
                'pet' => $pet,
                'plan_benefits' => $plan_benefits,
                'service_usage' => $service_usage,
                'total_coverage_used' => $total_coverage_used,
                'total_coverage_limit' => $plan_benefits['annual_limit'],
                'remaining_coverage' => $remaining
            );
        }
        
        private function parseClaimServices($services_string) {
            $services = array();
            
            error_log("Unified Tracker: Parsing services string: " . $services_string);
            
            // FIXED: Handle JSON format with better parsing for individual service amounts
            if (strpos($services_string, '[{') !== false || strpos($services_string, '{') !== false) {
                // Clean up escaped quotes that might be causing issues
                $clean_json = str_replace(['""', '\\"', '\\\\'], ['"', '"', '\\'], $services_string);
                
                // Try to decode JSON
                $decoded = json_decode($clean_json, true);
                
                if ($decoded && is_array($decoded)) {
                    foreach ($decoded as $service) {
                        $service_name = $service['name'] ?? '';
                        $discounted_fee = floatval($service['discounted_fee'] ?? $service['amount'] ?? 0);
                        
                        // FIXED: Use individual service discounted_fee, not claim total
                        if ($discounted_fee > 0) {
                            $services[] = array(
                                'name' => $service_name,
                                'amount' => $discounted_fee
                            );
                            error_log("Unified Tracker: JSON service - {$service_name}: â‚¦{$discounted_fee}");
                        }
                    }
                } else {
                    error_log("Unified Tracker: JSON decode failed for: " . $services_string);
                    
                    // Fallback: try to extract service names and amounts manually from JSON-like string
                    preg_match_all('/"name":\s*"([^"]+)"[^}]*"discounted_fee":\s*([0-9.]+)/i', $services_string, $matches, PREG_SET_ORDER);
                    
                    foreach ($matches as $match) {
                        $service_name = trim($match[1]);
                        $amount = floatval($match[2]);
                        
                        if ($amount > 0) {
                            $services[] = array(
                                'name' => $service_name,
                                'amount' => $amount
                            );
                            error_log("Unified Tracker: Regex service - {$service_name}: â‚¦{$amount}");
                        }
                    }
                }
            } else {
                // FIXED: Handle comma-separated services with better parsing
                $service_lines = explode(',', $services_string);
                
                foreach ($service_lines as $service_line) {
                    $service_line = trim($service_line);
                    
                    if (!empty($service_line)) {
                        // Try to extract service name and amount from various formats
                        if (preg_match('/^(.+?)\s*[-:]\s*[â‚¦]?\s*([0-9,]+\.?[0-9]*)/', $service_line, $matches)) {
                            $service_name = trim($matches[1]);
                            $amount = floatval(str_replace(',', '', $matches[2]));
                        } else {
                            // Just service name, no amount
                            $service_name = $service_line;
                            $amount = 0;
                        }
                        
                        $services[] = array(
                            'name' => $service_name,
                            'amount' => $amount
                        );
                        
                        error_log("Unified Tracker: Comma service - {$service_name}: â‚¦{$amount}");
                    }
                }
            }
            
            return $services;
        }
        
        public function recordBenefitUsage($hmo_id, $claim_id, $service_name, $amount_used, $service_type = 'medical') {
            $current_year = date('Y');
            
            // Check if this usage record already exists
            $exists = $this->wpdb->get_var($this->wpdb->prepare(
                "SELECT id FROM {$this->usage_table} WHERE hmo_id = %s AND claim_id = %s AND service_name = %s",
                $hmo_id, $claim_id, $service_name
            ));
            
            if (!$exists) {
                $this->wpdb->insert(
                    $this->usage_table,
                    array(
                        'hmo_id' => $hmo_id,
                        'service_type' => $service_type,
                        'service_name' => $service_name,
                        'usage_count' => 1,
                        'amount_used' => $amount_used,
                        'claim_id' => $claim_id,
                        'plan_year' => $current_year
                    ),
                    array('%s', '%s', '%s', '%d', '%f', '%s', '%d')
                );
            }
        }
        
        public function getUsageByYear($hmo_id, $year = null) {
            if (!$year) {
                $year = date('Y');
            }
            
            return $this->wpdb->get_results($this->wpdb->prepare(
                "SELECT * FROM {$this->usage_table} WHERE hmo_id = %s AND plan_year = %d ORDER BY usage_date DESC",
                $hmo_id, $year
            ));
        }
        
        public function getTotalUsageByService($hmo_id, $service_name, $year = null) {
            if (!$year) {
                $year = date('Y');
            }
            
            return $this->wpdb->get_row($this->wpdb->prepare(
                "SELECT SUM(usage_count) as total_count, SUM(amount_used) as total_amount 
                 FROM {$this->usage_table} 
                 WHERE hmo_id = %s AND service_name = %s AND plan_year = %d",
                $hmo_id, $service_name, $year
            ));
        }
    }
}

// ========================================
// ADMIN INTERFACE HANDLERS
// ========================================

// Enhanced admin interface handlers with unified system support
add_action('wp_ajax_skeepy_admin_approve_claim', 'skeepy_admin_approve_claim_handler');
add_action('wp_ajax_skeepy_admin_reject_claim', 'skeepy_admin_reject_claim_handler');
add_action('wp_ajax_skeepy_admin_mark_paid', 'skeepy_admin_mark_paid_handler');
add_action('wp_ajax_skeepy_admin_delete_claim', 'skeepy_admin_delete_claim_handler');

function skeepy_admin_approve_claim_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_id = sanitize_text_field($_POST['claim_id']);
    
    global $wpdb;
    
    // FIXED: Try both tables to find the claim
    $claim = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE claim_id = %s",
        $claim_id
    ));
    
    if (!$claim) {
        $claim = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM skeepy_claims WHERE claim_id = %s",
            $claim_id
        ));
        $table_name = 'skeepy_claims';
    } else {
        $table_name = $wpdb->prefix . 'skeepy_claims';
    }
    
    if (!$claim) {
        wp_send_json_error('Claim not found');
        return;
    }
    
    // Update claim status
    $wpdb->update(
        $table_name,
        array('status' => 'approved'),
        array('claim_id' => $claim_id)
    );
    
    // FIXED: Process benefit deduction using unified system
    $tracker = new SkeepyBenefitTracker();
    $benefit_data = $tracker->calculateUsedBenefits($claim->patient_hmo_id);
    
    // Parse services and record usage
    $services = $tracker->parseClaimServices($claim->services);
    
    foreach ($services as $service) {
        $service_name = $service['name'];
        $amount = $service['amount'];
        
        // If no individual amount, distribute total claim amount
        if ($amount == 0) {
            $claim_amount = floatval(str_replace(['â‚¦', ',', ' '], '', $claim->total_amount));
            $amount = $claim_amount / count($services);
        }
        
        $tracker->recordBenefitUsage($claim->patient_hmo_id, $claim_id, $service_name, $amount);
    }
    
    wp_send_json_success('Claim approved and benefits deducted');
}

function skeepy_admin_reject_claim_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_id = sanitize_text_field($_POST['claim_id']);
    
    global $wpdb;
    
    // FIXED: Try both tables to find the claim
    $claim = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE claim_id = %s",
        $claim_id
    ));
    
    if (!$claim) {
        $claim = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM skeepy_claims WHERE claim_id = %s",
            $claim_id
        ));
        $table_name = 'skeepy_claims';
    } else {
        $table_name = $wpdb->prefix . 'skeepy_claims';
    }
    
    if (!$claim) {
        wp_send_json_error('Claim not found');
        return;
    }
    
    // Update claim status
    $wpdb->update(
        $table_name,
        array('status' => 'rejected'),
        array('claim_id' => $claim_id)
    );
    
    wp_send_json_success('Claim rejected');
}

function skeepy_admin_mark_paid_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_id = sanitize_text_field($_POST['claim_id']);
    
    global $wpdb;
    
    // FIXED: Try both tables to find the claim
    $claim = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE claim_id = %s",
        $claim_id
    ));
    
    if (!$claim) {
        $claim = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM skeepy_claims WHERE claim_id = %s",
            $claim_id
        ));
        $table_name = 'skeepy_claims';
    } else {
        $table_name = $wpdb->prefix . 'skeepy_claims';
    }
    
    if (!$claim) {
        wp_send_json_error('Claim not found');
        return;
    }
    
    // Update claim status
    $wpdb->update(
        $table_name,
        array('status' => 'paid'),
        array('claim_id' => $claim_id)
    );
    
    // FIXED: Process benefit deduction if not already done
    $tracker = new SkeepyBenefitTracker();
    $benefit_data = $tracker->calculateUsedBenefits($claim->patient_hmo_id);
    
    // Parse services and record usage
    $services = $tracker->parseClaimServices($claim->services);
    
    foreach ($services as $service) {
        $service_name = $service['name'];
        $amount = $service['amount'];
        
        // If no individual amount, distribute total claim amount
        if ($amount == 0) {
            $claim_amount = floatval(str_replace(['â‚¦', ',', ' '], '', $claim->total_amount));
            $amount = $claim_amount / count($services);
        }
        
        $tracker->recordBenefitUsage($claim->patient_hmo_id, $claim_id, $service_name, $amount);
    }
    
    wp_send_json_success('Claim marked as paid and benefits deducted');
}

function skeepy_admin_delete_claim_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_id = sanitize_text_field($_POST['claim_id']);
    
    global $wpdb;
    
    // FIXED: Try both tables to find and delete the claim
    $deleted = $wpdb->delete(
        $wpdb->prefix . 'skeepy_claims',
        array('claim_id' => $claim_id)
    );
    
    if (!$deleted) {
        $deleted = $wpdb->delete(
            'skeepy_claims',
            array('claim_id' => $claim_id)
        );
    }
    
    if (!$deleted) {
        wp_send_json_error('Claim not found');
        return;
    }
    
    // Remove benefit usage records
    $tracker = new SkeepyBenefitTracker();
    $wpdb->delete(
        $tracker->usage_table,
        array('claim_id' => $claim_id)
    );
    
    wp_send_json_success('Claim deleted');
}

// ========================================
// BULK ACTIONS HANDLERS
// ========================================

add_action('wp_ajax_skeepy_admin_bulk_approve', 'skeepy_admin_bulk_approve_handler');
add_action('wp_ajax_skeepy_admin_bulk_reject', 'skeepy_admin_bulk_reject_handler');
add_action('wp_ajax_skeepy_admin_bulk_mark_paid', 'skeepy_admin_bulk_mark_paid_handler');
add_action('wp_ajax_skeepy_admin_bulk_delete', 'skeepy_admin_bulk_delete_handler');

function skeepy_admin_bulk_approve_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_ids = $_POST['claim_ids'];
    if (!is_array($claim_ids) || empty($claim_ids)) {
        wp_send_json_error('No claims selected');
        return;
    }
    
    $success_count = 0;
    $tracker = new SkeepyBenefitTracker();
    
    foreach ($claim_ids as $claim_id) {
        $claim_id = sanitize_text_field($claim_id);
        
        global $wpdb;
        
        // FIXED: Try both tables to find the claim
        $claim = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE claim_id = %s",
            $claim_id
        ));
        
        if (!$claim) {
            $claim = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM skeepy_claims WHERE claim_id = %s",
                $claim_id
            ));
            $table_name = 'skeepy_claims';
        } else {
            $table_name = $wpdb->prefix . 'skeepy_claims';
        }
        
        if ($claim) {
            // Update claim status
            $wpdb->update(
                $table_name,
                array('status' => 'approved'),
                array('claim_id' => $claim_id)
            );
            
            // Process benefit deduction
            $services = $tracker->parseClaimServices($claim->services);
            
            foreach ($services as $service) {
                $service_name = $service['name'];
                $amount = $service['amount'];
                
                if ($amount == 0) {
                    $claim_amount = floatval(str_replace(['â‚¦', ',', ' '], '', $claim->total_amount));
                    $amount = $claim_amount / count($services);
                }
                
                $tracker->recordBenefitUsage($claim->patient_hmo_id, $claim_id, $service_name, $amount);
            }
            
            $success_count++;
        }
    }
    
    wp_send_json_success("{$success_count} claims approved and benefits deducted");
}

function skeepy_admin_bulk_reject_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_ids = $_POST['claim_ids'];
    if (!is_array($claim_ids) || empty($claim_ids)) {
        wp_send_json_error('No claims selected');
        return;
    }
    
    $success_count = 0;
    
    foreach ($claim_ids as $claim_id) {
        $claim_id = sanitize_text_field($claim_id);
        
        global $wpdb;
        
        // FIXED: Try both tables to find the claim
        $claim = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE claim_id = %s",
            $claim_id
        ));
        
        if (!$claim) {
            $claim = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM skeepy_claims WHERE claim_id = %s",
                $claim_id
            ));
            $table_name = 'skeepy_claims';
        } else {
            $table_name = $wpdb->prefix . 'skeepy_claims';
        }
        
        if ($claim) {
            // Update claim status
            $wpdb->update(
                $table_name,
                array('status' => 'rejected'),
                array('claim_id' => $claim_id)
            );
            
            $success_count++;
        }
    }
    
    wp_send_json_success("{$success_count} claims rejected");
}

function skeepy_admin_bulk_mark_paid_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_ids = $_POST['claim_ids'];
    if (!is_array($claim_ids) || empty($claim_ids)) {
        wp_send_json_error('No claims selected');
        return;
    }
    
    $success_count = 0;
    $tracker = new SkeepyBenefitTracker();
    
    foreach ($claim_ids as $claim_id) {
        $claim_id = sanitize_text_field($claim_id);
        
        global $wpdb;
        
        // FIXED: Try both tables to find the claim
        $claim = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}skeepy_claims WHERE claim_id = %s",
            $claim_id
        ));
        
        if (!$claim) {
            $claim = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM skeepy_claims WHERE claim_id = %s",
                $claim_id
            ));
            $table_name = 'skeepy_claims';
        } else {
            $table_name = $wpdb->prefix . 'skeepy_claims';
        }
        
        if ($claim) {
            // Update claim status
            $wpdb->update(
                $table_name,
                array('status' => 'paid'),
                array('claim_id' => $claim_id)
            );
            
            // Process benefit deduction
            $services = $tracker->parseClaimServices($claim->services);
            
            foreach ($services as $service) {
                $service_name = $service['name'];
                $amount = $service['amount'];
                
                if ($amount == 0) {
                    $claim_amount = floatval(str_replace(['â‚¦', ',', ' '], '', $claim->total_amount));
                    $amount = $claim_amount / count($services);
                }
                
                $tracker->recordBenefitUsage($claim->patient_hmo_id, $claim_id, $service_name, $amount);
            }
            
            $success_count++;
        }
    }
    
    wp_send_json_success("{$success_count} claims marked as paid and benefits deducted");
}

function skeepy_admin_bulk_delete_handler() {
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Insufficient permissions');
        return;
    }
    
    $claim_ids = $_POST['claim_ids'];
    if (!is_array($claim_ids) || empty($claim_ids)) {
        wp_send_json_error('No claims selected');
        return;
    }
    
    $success_count = 0;
    $tracker = new SkeepyBenefitTracker();
    
    foreach ($claim_ids as $claim_id) {
        $claim_id = sanitize_text_field($claim_id);
        
        global $wpdb;
        
        // FIXED: Try both tables to find and delete the claim
        $deleted = $wpdb->delete(
            $wpdb->prefix . 'skeepy_claims',
            array('claim_id' => $claim_id)
        );
        
        if (!$deleted) {
            $deleted = $wpdb->delete(
                'skeepy_claims',
                array('claim_id' => $claim_id)
            );
        }
        
        if ($deleted) {
            // Remove benefit usage records
            $wpdb->delete(
                $tracker->usage_table,
                array('claim_id' => $claim_id)
            );
            
            $success_count++;
        }
    }
    
    wp_send_json_success("{$success_count} claims deleted");
}

// ========================================
// PATIENT VERIFICATION HANDLER
// ========================================

// Patient verification handler for clinic dashboard
add_action('wp_ajax_skeepy_verify_patient', 'skeepy_unified_verify_patient_handler');
add_action('wp_ajax_nopriv_skeepy_verify_patient', 'skeepy_unified_verify_patient_handler');

function skeepy_unified_verify_patient_handler() {
    // FIXED: Handle both nonce formats from clinic dashboard and admin interface
    $nonce_valid = false;
    
    // Check clinic dashboard nonce format
    if (isset($_POST['_wpnonce']) && wp_verify_nonce($_POST['_wpnonce'], 'verify_patient_nonce')) {
        $nonce_valid = true;
    }
    
    // Check admin interface nonce format
    if (isset($_POST['security']) && wp_verify_nonce($_POST['security'], 'skeepy_ajax_nonce')) {
        $nonce_valid = true;
    }
    
    if (!$nonce_valid) {
        wp_send_json_error('Security check failed');
        return;
    }
    
    $hmo_id = sanitize_text_field($_POST['hmo_id']);
    
    // Clean and validate HMO ID
    $hmo_id = trim($hmo_id);
    if (empty($hmo_id)) {
        wp_send_json_error('Please enter an HMO ID');
        return;
    }
    
    // Add prefix if not present
    if (!str_starts_with($hmo_id, 'SKEEPYHMO-')) {
        $hmo_id = 'SKEEPYHMO-' . $hmo_id;
    }
    
    global $wpdb;
    
    // Get patient data
    $patient = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}skeepy_pets WHERE hmo_id = %s LIMIT 1",
        $hmo_id
    ));
    
    if (!$patient) {
        wp_send_json_error('HMO ID does not exist');
        return;
    }
    
    // Calculate benefit data
    $tracker = new SkeepyBenefitTracker();
    $benefit_data = $tracker->calculateUsedBenefits($hmo_id);
    
    if (isset($benefit_data['error'])) {
        wp_send_json_error($benefit_data['error']);
        return;
    }
    
    // Debug logging for coverage data
    error_log("Patient Verification: Coverage data for HMO {$hmo_id}:");
    error_log("- Total Coverage Used: â‚¦" . number_format($benefit_data['total_coverage_used']));
    error_log("- Total Coverage Limit: â‚¦" . number_format($benefit_data['total_coverage_limit']));
    error_log("- Remaining Coverage: â‚¦" . number_format($benefit_data['remaining_coverage']));
    error_log("- Service Usage: " . print_r($benefit_data['service_usage'], true));
    error_log("- Plan Benefits: " . print_r($benefit_data['plan_benefits'], true));
    
    // FIXED: Use processed pet data from benefit tracker (already has corrected age/birthday)
    $processed_pet = $benefit_data['pet'];
    
    // FIXED: Format birthday properly (April 16 instead of 2025-04-16)
    $formatted_birthday = 'Not provided';
    if (!empty($processed_pet->pet_birthday) && $processed_pet->pet_birthday !== '0000-00-00') {
        try {
            $birthday_date = new DateTime($processed_pet->pet_birthday);
            $formatted_birthday = $birthday_date->format('F j'); // April 16
        } catch (Exception $e) {
            $formatted_birthday = 'Not provided';
        }
    }
    
    // FIXED: Calculate plan start and expiry dates using activation_date
    $plan_start_date = 'Not activated yet';
    $plan_expiry_date = 'Not available';
    
    if (!empty($processed_pet->activation_date)) {
        try {
            $activation_date = new DateTime($processed_pet->activation_date);
            $plan_start_date = $activation_date->format('F j, Y');
            
            // Calculate expiry based on plan duration
            $duration_days = 365; // Default annual
            if ($processed_pet->plan_duration === 'Monthly') {
                $duration_days = 30;
            } elseif ($processed_pet->plan_duration === 'Quarterly') {
                $duration_days = 90;
            }
            
            $expiry_date = clone $activation_date;
            $expiry_date->add(new DateInterval('P' . $duration_days . 'D'));
            $plan_expiry_date = $expiry_date->format('F j, Y');
        } catch (Exception $e) {
            // Keep default values
        }
    } elseif (!empty($processed_pet->registration_date)) {
        try {
            $registration_date = new DateTime($processed_pet->registration_date);
            $plan_start_date = $registration_date->format('F j, Y');
            
            // Calculate expiry based on plan duration
            $duration_days = 365; // Default annual
            if ($processed_pet->plan_duration === 'Monthly') {
                $duration_days = 30;
            } elseif ($processed_pet->plan_duration === 'Quarterly') {
                $duration_days = 90;
            }
            
            $expiry_date = clone $registration_date;
            $expiry_date->add(new DateInterval('P' . $duration_days . 'D'));
            $plan_expiry_date = $expiry_date->format('F j, Y');
        } catch (Exception $e) {
            // Keep default values
        }
    }
    
    // FIXED: Format guardian name properly
    $guardian_name = 'Not provided';
    if (!empty($processed_pet->guardian_first_name) && !empty($processed_pet->guardian_surname)) {
        $guardian_name = $processed_pet->guardian_first_name . ' ' . $processed_pet->guardian_surname;
    } elseif (!empty($processed_pet->guardian_first_name)) {
        $guardian_name = $processed_pet->guardian_first_name;
    } elseif (!empty($processed_pet->guardian_surname)) {
        $guardian_name = $processed_pet->guardian_surname;
    }
    
    // Build response data
    $response_data = array(
        'hmo_id' => $processed_pet->hmo_id,
        'pet_name' => $processed_pet->pet_name,
        'pet_type' => ucfirst($processed_pet->pet_type),
        'pet_breed' => $processed_pet->pet_breed,
        'pet_gender' => ucfirst($processed_pet->pet_gender),
        'pet_color' => $processed_pet->pet_color,
        'pet_age' => $processed_pet->pet_age, // FIXED: Use processed age, not calculated
        'pet_birthday' => $formatted_birthday, // FIXED: Use formatted birthday (April 16)
        'guardian_first_name' => $processed_pet->guardian_first_name,
        'guardian_surname' => $processed_pet->guardian_surname,
        'guardian_name' => $guardian_name, // FIXED: Full guardian name
        'guardian_phone' => $processed_pet->guardian_phone,
        'guardian_email' => $processed_pet->guardian_email,
        'guardian_address' => $processed_pet->guardian_address,
        'plan_type' => ucfirst($processed_pet->plan_type),
        'plan_duration' => $processed_pet->plan_duration,
        'plan_status' => $processed_pet->plan_status ?? 'Active',
        'plan_start_date' => $plan_start_date, // FIXED: Proper plan start date
        'plan_expiry_date' => $plan_expiry_date, // FIXED: Proper plan expiry date
        'activation_date' => $plan_start_date, // DUPLICATE: For frontend compatibility
        'total_coverage_used' => $benefit_data['total_coverage_used'],
        'total_coverage_limit' => $benefit_data['total_coverage_limit'],
        'remaining_coverage' => $benefit_data['remaining_coverage'],
        'service_usage' => $benefit_data['service_usage'],
        'plan_benefits' => $benefit_data['plan_benefits']
    );
    
    // Debug logging for response data
    error_log("Patient Verification: Response data for HMO {$hmo_id}:");
    error_log("- Plan Start Date: " . $plan_start_date);
    error_log("- Plan Expiry Date: " . $plan_expiry_date);
    error_log("- Guardian Name: " . $guardian_name);
    error_log("- Pet Birthday: " . $formatted_birthday);
    error_log("- Coverage Available: " . (empty($benefit_data['service_usage']) ? 'NO' : 'YES'));
    
    wp_send_json_success($response_data);
}